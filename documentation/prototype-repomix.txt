This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-01-13T00:23:42.884Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
config/
  projects.json
  socials.json
js/
  encode_configs.js
  main.js
notes/
  about.md
  markdown.md
projects/
  neural-network/
    body.md
    config.html
    index.html
    overview.md
  quantum-circuit/
    index.html
  under-construction/
    index.html
  template.html
scripts/
  encode_config.js
styles/
  construction.css
  main.css
CNAME
DESIGN.md
IMPLEMENTATION.md
index.html
README.md
robots.txt
seo.md
site.webmanifest
sitemap.xml
TODO.md

================================================================
Files
================================================================

================
File: config/projects.json
================
{
  "projects": [
    {
      "id": "neural-network",
      "title": "LLM et. all work",
      "subtitle": "ML Study",
      "description": "Various ML projects for education",
      "specs": [
        "Tech: Python, PyTorch, TensorFlow, CUDA",
        "Status: Active Development",
        "Importance: Core Research"
      ],
      "buttons": {
        "preview": "/projects/neural-network",
        "link": "/projects/neural-network",
        "github": "https://github.com/pauljunsukhan/neural-network"
      }
    },
    {
      "id": "silent-speech",
      "title": "Silent Speech",
      "subtitle": "Silent Speech Interfaces",
      "description": "Developing silent speech interfaces for AI-Human interfaces",
      "specs": [
        "Tech: Signal Processing, ML, Hardware",
        "Status: Research Phase",
        "Importance: Future Interface"
      ],
      "buttons": {
        "preview": "/projects/under-construction",
        "link": "/projects/under-construction",
        "github": "https://github.com/pauljunsukhan/throatmicdata"
      }
    },
    {
      "id": "software-et-all",
      "title": "General Software Projects",
      "subtitle": "Learning coding and building useful things",
      "description": "Chatroom, web apps, utilities, tools of the trade",
      "specs": [
        "Tech: Python, HTML, CSS, JavaScript, Heroku",
        "Status: Always useful",
        "Check this out: http://chatroom.kato.cx/"
      ],
      "buttons": {
        "preview": "/projects/under-construction",
        "link": "/projects/under-construction",
        "github": "https://github.com/pauljunsukhan/chatroomkatocx"
      }
    },
    {
      "id": "llm-verb-originality-benchmark",
      "title": "Benchmarking LLMs",
      "subtitle": "Ranked written report on LLM verbal originality.",
      "description": "I will collaborate with your LLM for one hour on an original verbal topic and create a 500 word ranked written report.",
      "specs": [
        "Price: $175"
      ],
      "buttons": {
        "preview": "/projects/under-construction",
        "link": "/projects/under-construction",
        "github": "https://github.com/pauljunsukhan/chatroomkatocx"
      }
    },
    {
      "id": "electronics-et-all",
      "title": "General EE Projects",
      "subtitle": "PCB, micros, systems, wearables, being an EE",
      "description": "What all EEs need to know",
      "specs": [
        "Tech: KiCad, Altium, OrCAD, Art of Electronics, ESP32, Arduino, TTL",
        "Status: How I make a living (right now)",
        "Newest thing: wearable ESP32 PCB for sports"
      ],
      "buttons": {
        "preview": "/projects/under-construction",
        "link": "/projects/under-construction",
        "github": "https://github.com/pauljunsukhan/portfolio"
      }
    },
    {
      "id": "3d-printing",
      "title": "3D Printing",
      "subtitle": "3D Printing & CAD",
      "description": "Various 3D prints + CAD/3DP education. I like industrial design & useful utility for projects.",
      "specs": [
        "Tech: Bambu, FDM, PC/PA, Onshape, Design",
        "Status: Semi-cracked after a summer",
        "Role: Designer & Developer"
      ],
      "buttons": {
        "preview": "/projects/under-construction",
        "link": "/projects/under-construction",
        "github": "https://github.com/pauljunsukhan/portfolio"
      }
    },
    {
      "id": "tesla-coils",
      "title": "High Voltage",
      "subtitle": "Tesla Coils, Plasma Speakers, HV",
      "description": "High voltage power electronics that make sparks, music, and melted metal.",
      "specs": [
        "Tech: SSTC, DRSSTC, VTTC, ZVS, HV",
        "Status: Not active",
        "Importance: Foundational EE knowledge"
      ],
      "buttons": {
        "preview": "/projects/under-construction",
        "link": "/projects/under-construction",
        "github": "https://github.com/pauljunsukhan/portfolio"
      }
    },
    {
      "id": "power-electronics",
      "title": "Power Electronics, Big Silicon, & Wireless Charging",
      "subtitle": "Induction heating, wireless energy transfer, DC/DC converters",
      "description": "High power electronics & power electronics",
      "specs": [
        "Tech: H-bridge, PWM, Buck/Boost, Induction heating, Wireless charging",
        "Status: Old",
        "Importance: Foundational EE knowledge"
      ],
      "buttons": {
        "preview": "/projects/under-construction",
        "link": "/projects/under-construction",
        "github": "https://github.com/pauljunsukhan/portfolio"
      }
    },
    {
      "id": "audio-electronics",
      "title": "Audio, cassette, radios",
      "subtitle": "Audio electronics, vacuum tubes, radios, cassette decks",
      "description": "Childhood hobby that got me started",
      "specs": [
        "Tech: Old old stuff",
        "Status: Historical",
        "Importance: Foundational EE knowledge"
      ],
      "buttons": {
        "preview": "/projects/under-construction",
        "link": "/projects/under-construction",
        "github": "https://github.com/pauljunsukhan/portfolio"
      }
    },
    {
      "id": "ai-guardian",
      "title": "AI Guardian",
      "subtitle": "AI-Human Intelligence Augmentation",
      "description": "Exploratory notes on AI-Human intelligence augmentation. tFUS/BCI/neurotech. Silent speech interfaces.",
      "specs": [
        "Tech: Pen and paper",
        "Status: Cooking",
        "Importance: Long term"
      ],
      "buttons": {
        "preview": "/projects/under-construction",
        "link": "/projects/under-construction"
      }
    }
  ]
}

================
File: config/socials.json
================
{
    "email": {
        "icon": "‚úâ",
        "label": "Email",
        "value": "aW8ucGF1bEBrYXRvLmN4",
        "type": "dialog",
        "encrypt": true
    },
    "messaging": {
        "icon": "üí¨",
        "label": "Messaging",
        "value": "ODYwLTcwOS04MzY4",
        "dialogContent": "Text, Signal, Telegram, Teletype",
        "type": "dialog",
        "encrypt": true
    },
    "discord": {
        "icon": "üéÆ",
        "label": "Discord",
        "value": "@velvetundergroundandy",
        "type": "dialog",
        "encrypt": false
    },
    "twitter": {
        "icon": "ùïè",
        "label": "Twitter",
        "url": "https://twitter.com/pauljunsukhan",
        "type": "link"
    },
    "github": {
        "icon": "‚å®",
        "label": "GitHub",
        "url": "https://github.com/pauljunsukhan",
        "type": "link"
    },
    "huggingface": {
        "icon": "ü§ó",
        "label": "HuggingFace",
        "url": "https://huggingface.co/pauljunsukhan",
        "type": "link"
    },
    "linkedin": {
        "icon": "üíº",
        "label": "LinkedIn",
        "url": "https://www.linkedin.com/in/pauljunsukhan",
        "type": "link"
    },
    "substack": {
        "icon": "üìù",
        "label": "Substack",
        "url": "https://pauljunsukhanwrites.substack.com",
        "type": "link"
    },
    "resume_sw": {
        "icon": "üìÑ",
        "label": "Resume (SW)",
        "url": "./assets/docs/Han_Paul Resume_SW.pdf",
        "type": "link"
    },
    "resume_hw": {
        "icon": "üìã",
        "label": "Resume (HW)",
        "url": "./assets/docs/Han_Paul Resume.pdf",
        "type": "link"
    }
}

================
File: js/encode_configs.js
================
const fs = require('fs');
const path = require('path');

// Read the original config
const configPath = path.join(__dirname, '../config/socials.json');
const config = JSON.parse(fs.readFileSync(configPath, 'utf8'));

// Process each social entry
Object.entries(config).forEach(([key, social]) => {
    if (social.type === 'dialog' && social.encrypt) {
        // Base64 encode the value
        social.value = Buffer.from(social.value).toString('base64');
    }
});

// Write the processed config
fs.writeFileSync(configPath, JSON.stringify(config, null, 4));

================
File: js/main.js
================
document.querySelectorAll('a[href^="#"]').forEach(anchor => {
    anchor.addEventListener('click', function (e) {
        e.preventDefault();
        const target = document.querySelector(this.getAttribute('href'));
        if (target) {
            target.scrollIntoView({
                behavior: 'smooth',
                block: 'start'
            });
        }
    });
});

document.addEventListener('DOMContentLoaded', () => {
    const lazyImages = document.querySelectorAll('img[data-src]');
    
    const imageObserver = new IntersectionObserver((entries, observer) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                const img = entry.target;
                img.src = img.dataset.src;
                img.removeAttribute('data-src');
                observer.unobserve(img);
            }
        });
    });

    lazyImages.forEach(img => imageObserver.observe(img));
});

const contactForm = document.querySelector('.contact-form form');
if (contactForm) {
    contactForm.addEventListener('submit', function(e) {
        e.preventDefault();
        console.log('Form submitted');
    });
} 

const overlay = document.createElement('div');
overlay.className = 'overlay';
document.body.appendChild(overlay);

const errorDialog = document.createElement('div');
errorDialog.className = 'error-dialog';
errorDialog.innerHTML = `
    <div class="window-title-bar">
        <div class="window-controls">
            <div class="window-button"></div>
        </div>
        <div class="window-title">Error</div>
    </div>
    <div class="content">
        <p>Oops! Something went wrong.</p>
    </div>
`;
document.body.appendChild(errorDialog);

function showDialog(dialog) {
    dialog.classList.add('active');
    overlay.classList.add('active');
}

function hideDialog(dialog) {
    dialog.classList.remove('active');
    overlay.classList.remove('active');
}

function showError() {
    errorDialog.classList.add('active');
    overlay.classList.add('active');
}

function hideError() {
    errorDialog.classList.remove('active');
    overlay.classList.remove('active');
}

async function loadSocialConfig() {
    try {
        console.log('Attempting to load social config...');
        const response = await fetch('./config/socials.json');
        if (!response.ok) {
            throw new Error(`Failed to load social config: ${response.status}`);
        }
        const data = await response.json();
        console.log('Social config loaded successfully');
        return data;
    } catch (error) {
        console.error('Error loading social config:', error);
        return null;
    }
}

function decode(encoded) {
    return atob(encoded);
}

async function generateSocialLinks() {
    const config = await loadSocialConfig();
    if (!config) return;

    const socialGrid = document.querySelector('.social-grid[role="list"]');
    if (!socialGrid) {
        console.error('Social grid not found');
        return;
    }

    socialGrid.innerHTML = '';

    Object.entries(config).forEach(([key, social]) => {
        const element = document.createElement(social.type === 'link' ? 'a' : 'button');
        element.className = `social-link social-${key}`;
        
        if (social.type === 'link') {
            element.href = social.url;
            element.target = '_blank';
            element.rel = 'noopener noreferrer';
        }

        element.innerHTML = `
            <span class="social-icon">${social.icon}</span>
            <span class="social-label">${social.label}</span>
        `;

        socialGrid.appendChild(element);

        if (social.type === 'dialog') {
            const dialog = document.createElement('div');
            dialog.className = 'mac-dialog';
            dialog.innerHTML = `
                <div class="window-title-bar">
                    <div class="window-controls">
                        <div class="window-button close-button"></div>
                    </div>
                    <div class="window-title">Contact Info</div>
                </div>
                <div class="content">
                    ${social.dialogContent ? `<p>${social.dialogContent}</p>` : ''}
                    <p class="protected-content">${social.encrypt ? decode(social.value) : social.value}</p>
                </div>
            `;
            document.body.appendChild(dialog);

            element.addEventListener('click', () => showDialog(dialog));
            dialog.querySelector('.close-button').addEventListener('click', () => hideDialog(dialog));
        }
    });

    overlay.addEventListener('click', () => {
        document.querySelectorAll('.mac-dialog.active').forEach(dialog => {
            hideDialog(dialog);
        });
    });

    document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
            document.querySelectorAll('.mac-dialog.active').forEach(dialog => {
                hideDialog(dialog);
            });
        }
    });
}

async function loadProjects() {
    try {
        console.log('Loading projects...');
        const response = await fetch('./config/projects.json', {
            cache: 'no-store'
        });
        if (!response.ok) {
            throw new Error(`Failed to load projects: ${response.status}`);
        }
        const data = await response.json();
        
        const dynamicProjectsGrid = document.querySelector('.project-grid.dynamic-projects');
        if (!dynamicProjectsGrid) {
            throw new Error('Projects container not found');
        }

        dynamicProjectsGrid.innerHTML = '';

        const seenIds = new Set();

        data.projects.forEach(project => {
            if (seenIds.has(project.id)) {
                console.warn(`Duplicate project ID found: ${project.id}`);
                return;
            }
            seenIds.add(project.id);

            const projectWindow = createProjectWindow(project);
            dynamicProjectsGrid.appendChild(projectWindow);
        });

        initializeProjectWindows();
        console.log('Projects loaded successfully');
    } catch (error) {
        console.error('Error loading projects:', error);
        const dynamicProjectsGrid = document.querySelector('.project-grid.dynamic-projects');
        if (dynamicProjectsGrid) {
            dynamicProjectsGrid.innerHTML = `
                <div class="error-message">
                    <h3>Error Loading Projects</h3>
                    <p>Please try refreshing the page.</p>
                </div>
            `;
        }
    }
}

function createProjectWindow(project) {
    const windowDiv = document.createElement('div');
    windowDiv.className = 'mac-window project-window loading';
    windowDiv.setAttribute('data-project', project.id);

    // Ensure buttons object exists with default values
    const buttons = project.buttons || {};
    const githubUrl = buttons.github || '#';
    const previewUrl = buttons.preview || '/projects/under-construction';
    const linkUrl = buttons.link || '/projects/under-construction';

    const titleBar = document.createElement('div');
    titleBar.className = 'window-title-bar';
    titleBar.innerHTML = `
        <div class="window-controls">
            <div class="window-button"></div>
            <div class="window-button"></div>
            <div class="window-button"></div>
        </div>
        <div class="window-title">${project.title || 'Untitled Project'}</div>
        <div class="window-buttons">
            <button class="preview-button">Preview</button>
            ${githubUrl !== '#' ? `<a href="${githubUrl}" target="_blank" class="github-button">Github</a>` : ''}
        </div>
    `;

    function linkifySpec(spec) {
        if (!spec) return '';
        if (spec.startsWith('Link:')) {
            const [prefix, url] = spec.split('Link:');
            return `Link: <a href="${url.trim()}" target="_blank">${url.trim()}</a>`;
        }
        return spec;
    }

    windowDiv.innerHTML = `
        <div class="window-title-bar">
            <div class="window-controls">
                <div class="window-button maximize-button"></div>
            </div>
            <div class="window-title">${project.title || 'Untitled Project'}</div>
            ${githubUrl !== '#' ? `<a href="${githubUrl}" class="project-link-button">Github</a>` : ''}
        </div>
        <div class="content">
            <h3>${project.subtitle || ''}</h3>
            <p>${project.description || ''}</p>
            <ul>
                ${(project.specs || []).map(spec => `<li>${linkifySpec(spec)}</li>`).join('')}
            </ul>
            <div class="project-actions">
                <button class="project-button preview" data-project="${project.id}">Preview</button>
                <a href="${linkUrl}" class="project-button link">Link</a>
            </div>
        </div>
    `;

    setTimeout(() => windowDiv.classList.remove('loading'), 100);
    return windowDiv;
}

function initializeProjectWindows() {
    const projectWindows = document.querySelectorAll('.project-window');
    const previewButtons = document.querySelectorAll('.project-button.preview');
    const previewWindow = document.querySelector('.project-preview');
    const exitButton = previewWindow.querySelector('.exit-button');
    const previewContent = previewWindow.querySelector('.preview-content');
    
    previewButtons.forEach(button => {
        button.addEventListener('click', async (e) => {
            const projectId = button.dataset.project;
            const url = getProjectUrl(projectId);
            
            try {
                const response = await fetch(url + 'index.html', {
                    cache: 'no-store',
                    headers: {
                        'Cache-Control': 'no-cache',
                        'Pragma': 'no-cache'
                    }
                });
                if (!response.ok) throw new Error('Project content not found');
                
                const content = await response.text();
                
                const parser = new DOMParser();
                const doc = parser.parseFromString(content, 'text/html');
                
                const mainWindow = doc.querySelector('main.mac-window');
                if (mainWindow) {
                    previewWindow.classList.add('active');
                    document.body.classList.add('preview-open');
                    
                    previewContent.innerHTML = '';
                    const clonedWindow = mainWindow.cloneNode(true);
                    
                    // Add base URL for relative paths
                    const baseUrl = url.endsWith('/') ? url : url + '/';
                    const baseTag = document.createElement('base');
                    baseTag.href = baseUrl;
                    previewContent.appendChild(baseTag);
                    
                    // Clone and modify scripts
                    const scripts = doc.querySelectorAll('script');
                    for (const script of scripts) {
                        const newScript = document.createElement('script');
                        if (script.src) {
                            newScript.src = new URL(script.src, baseUrl).href;
                        }
                        newScript.textContent = script.textContent;
                        previewContent.appendChild(newScript);
                    }
                    
                    // Clone and modify styles
                    const styles = doc.querySelectorAll('link[rel="stylesheet"]');
                    for (const style of styles) {
                        const newStyle = document.createElement('link');
                        newStyle.rel = 'stylesheet';
                        newStyle.href = new URL(style.href, baseUrl).href;
                        previewContent.appendChild(newStyle);
                    }
                    
                    previewContent.appendChild(clonedWindow);
                    
                    // Initialize content loading
                    if (typeof loadContent === 'function') {
                        loadContent();
                    }
                    
                    if (url.includes('under-construction')) {
                        const existingStyles = document.querySelector('link[href*="construction.css"]');
                        if (existingStyles) {
                            existingStyles.remove();
                        }

                        const constructionStyles = document.createElement('link');
                        constructionStyles.rel = 'stylesheet';
                        constructionStyles.href = '/styles/construction.css';
                        document.head.appendChild(constructionStyles);

                        previewContent.style.display = 'none';
                        previewContent.offsetHeight;
                        previewContent.style.display = '';

                        initConstructionPage();
                    }
                } else {
                    throw new Error('Invalid project content structure');
                }
            } catch (error) {
                console.error('Error loading project:', error);
                previewContent.innerHTML = `
                    <div class="error-message">
                        <h3>Project Coming Soon</h3>
                        <p>This project is currently under development.</p>
                    </div>
                `;
                previewWindow.classList.add('active');
                document.body.classList.add('preview-open');
            }
        });
    });

    exitButton.addEventListener('click', () => {
        previewWindow.classList.remove('active');
        document.body.classList.remove('preview-open');
        setTimeout(() => {
            previewContent.innerHTML = '';
        }, 300);
    });

    document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && previewWindow.classList.contains('active')) {
            exitButton.click();
        }
    });
    
    projectWindows.forEach(window => {
        window.addEventListener('click', (e) => {
            const linkButton = e.target.closest('.project-link-button');
            if (!linkButton && !e.target.closest('.project-actions') && !e.target.closest('.window-controls')) {
                const projectId = window.dataset.project;
                const url = getProjectUrl(projectId);
                if (url) {
                    window.location.href = url;
                }
            }
        });
    });
}

function maximizeProject(projectWindow) {
    const maximizedView = document.querySelector('.maximized-project');
    const maximizedContent = maximizedView.querySelector('.content');
    const projectContent = projectWindow.querySelector('.content').cloneNode(true);
    const projectTitle = projectWindow.querySelector('.window-title').textContent;

    maximizedView.querySelector('.window-title').textContent = projectTitle;
    maximizedContent.innerHTML = '';
    maximizedContent.appendChild(projectContent);

    maximizedView.style.display = 'block';
    overlay.classList.add('active');
    setTimeout(() => {
        maximizedView.classList.add('active');
    }, 10);
}

function minimizeProject() {
    const maximizedView = document.querySelector('.maximized-project');
    maximizedView.classList.remove('active');
    overlay.classList.remove('active');
    setTimeout(() => {
        maximizedView.style.display = 'none';
    }, 300);
}

function getProjectUrl(projectId) {
    const projectPaths = {
        'neural-network': '/projects/neural-network/',
        'quantum-circuit': '/projects/quantum-circuit/',
        'retro-os': '/projects/under-construction/',
        'ai-assistant': '/projects/ai-assistant/'
    };
    const relativePath = projectPaths[projectId] || '/projects/under-construction/';
    return window.location.origin + relativePath;
}

function updateVisitorCounter() {
    try {
        const badge = document.getElementById('visitor-badge');
        const digits = document.querySelectorAll('.counter-digit');
        
        if (!badge || !digits.length) {
            throw new Error('Visitor counter elements not found');
        }

        function updateDisplay() {
            try {
                console.log('Attempting to update visitor count...');
                
                badge.crossOrigin = 'anonymous';
                
                const defaultCount = '001998';
                const paddedCount = defaultCount.padStart(6, '0');
                
                digits.forEach((digit, index) => {
                    digit.textContent = paddedCount[index] || '0';
                });

                badge.onerror = () => {
                    console.log('Badge load failed, using default count');
                };

                badge.onload = () => {
                    console.log('Badge loaded successfully');
                };

            } catch (error) {
                console.error('Error in updateDisplay:', error);
                return;
            }
        }

        console.log('Initializing visitor counter...');
        updateDisplay();

        setInterval(updateDisplay, 300000);
    } catch (error) {
        console.error('Visitor counter error:', error);
        return;
    }
}

function typewriterEffect(element) {
    const text = element.textContent;
    element.textContent = '';
    let i = 0;
    
    function type() {
        if (i < text.length) {
            element.textContent += text.charAt(i);
            i++;
            setTimeout(type, 100);
        }
    }
    
    type();
}

function initConstructionPage() {
    const dateElement = document.querySelector('.construction-date .typewriter');
    if (dateElement) {
        typewriterEffect(dateElement);
    }
}

class MarkdownLoader {
    constructor() {
        console.log('Current marked options:', marked.getDefaults());
        
        marked.setOptions({
            headerIds: true,
            mangle: false,
            headerPrefix: 'section-',
            breaks: true,
            gfm: true,
            highlight: function(code, lang) {
                if (lang && hljs.getLanguage(lang)) {
                    try {
                        return hljs.highlight(code, { language: lang }).value;
                    } catch (err) {}
                }
                return code;
            }
        });

        // Add header styles
        const style = document.createElement('style');
        style.textContent = `
            h1.header-1 { font-size: 2.5em; margin-top: 1em; }
            h2.header-2 { font-size: 2em; margin-top: 0.8em; }
            h3.header-3 { font-size: 1.75em; margin-top: 0.6em; }
            h4.header-4 { font-size: 1.5em; margin-top: 0.4em; }
            h5.header-5 { font-size: 1.25em; margin-top: 0.2em; }
            h6.header-6 { font-size: 1em; margin-top: 0.1em; }
        `;
        document.head.appendChild(style);

        marked.use({ renderer: this.createCustomRenderer() });
    }

    createCustomRenderer() {
        const renderer = new marked.Renderer();

        renderer.image = (href, title, text) => {
            // Get the path from the token
            let imagePath;
            if (typeof href === 'object') {
                // Try to get the path from tokens first
                if (href.tokens && href.tokens.length > 0) {
                    const pathToken = href.tokens.find(t => t.raw && t.raw.includes('/assets/'));
                    if (pathToken) {
                        imagePath = pathToken.raw.match(/\/assets\/[^)\s"]*/)?.[0];
                    }
                }
                
                // Fallback to other properties
                if (!imagePath) {
                    imagePath = href.raw || href.source || href.href || href.path;
                }
            } else {
                imagePath = href;
            }
            
            // Clean up the path if needed
            if (imagePath) {
                const pathMatch = imagePath.match(/\/assets\/[^)\s"]*/);
                if (pathMatch) {
                    imagePath = pathMatch[0];
                }
            }

            // Parse image dimensions from alt text
            let sizeStyle = '';
            let cleanAltText = '';
            
            if (text) {
                // Handle both string and object text tokens
                const altText = typeof text === 'object' ? (text.raw || text.text || '') : text;
                
                // Look for width directive
                const widthMatch = altText.match(/\|width:(\d+)(px|%)?/i);
                if (widthMatch) {
                    const [, value, unit = 'px'] = widthMatch;
                    sizeStyle = ` style="width: ${value}${unit}"`;
                    cleanAltText = altText.replace(/\|width:\d+(?:px|%)?/i, '').trim();
                } else {
                    cleanAltText = altText;
                }
            }

            return `<figure class="markdown-figure">
                <img src="${imagePath || ''}" 
                     alt="${cleanAltText}"
                     class="markdown-image"
                     loading="lazy"${sizeStyle}>
                ${title ? `<figcaption class="markdown-caption">${title}</figcaption>` : ''}
            </figure>`;
        };

        renderer.table = (header, body) => {
            return `
                <div class="table-container">
                    <table class="markdown-table">
                        <thead>${header}</thead>
                        <tbody>${body}</tbody>
                    </table>
                </div>
            `;
        };

        renderer.link = (href, title, text) => {
            const safeHref = typeof href === 'object' ? (href.raw || href.source || href.href || '#') : href;
            const isExternal = safeHref.toString().startsWith('http');
            const linkClass = isExternal ? 'markdown-link external' : 'markdown-link';
            const attrs = isExternal ? ' target="_blank" rel="noopener noreferrer"' : '';
            
            return `<a href="${safeHref}" class="${linkClass}"${attrs}${title ? ` title="${title}"` : ''}>${text}</a>`;
        };

        renderer.heading = (text, level) => {
            try {
                const extractText = (input) => {
                    if (typeof input === 'string') return input;
                    if (typeof input === 'object') {
                        if (input.text) return input.text;
                        if (input.raw) return input.raw.replace(/^#+\s+/, '');
                        return JSON.stringify(input);
                    }
                    return String(input || '');
                };

                const safeText = extractText(text);
                const escapedText = safeText.toLowerCase()
                    .replace(/[^\w]+/g, '-')
                    .replace(/^-+|-+$/g, '');
                const id = `section-${escapedText}`;
                const headerLevel = Math.min(Math.max(parseInt(level) || 1, 1), 6);
                
                return `<h${headerLevel} id="${id}" class="header-${headerLevel}">
                    ${safeText}
                    <a href="#${id}" class="header-anchor" aria-label="Link to this section">
                        <span aria-hidden="true">#</span>
                    </a>
                </h${headerLevel}>`;
            } catch (error) {
                console.error('Error in heading renderer:', error, { text, level });
                const headerLevel = Math.min(Math.max(parseInt(level) || 1, 1), 6);
                return `<h${headerLevel} class="header-${headerLevel}">${String(text || '')}</h${headerLevel}>`;
            }
        };

        renderer.blockquote = (quote) => {
            let type = 'info';
            let content = '';
            
            try {
                // Convert quote to string if it's not already
                const quoteStr = String(quote || '');
                
                // Check for special types at the start of the quote
                const typeMatch = quoteStr.match(/^(?:<p>)?(?:NOTE|WARNING|TIP):\s*/i);
                if (typeMatch) {
                    type = typeMatch[0].replace(/[^a-z]/gi, '').toLowerCase();
                    content = quoteStr.slice(typeMatch[0].length);
                } else {
                    content = quoteStr;
                }
                
                // Clean up any remaining <p> tags
                content = content.replace(/^<p>|<\/p>$/g, '');
                
                return `<blockquote class="markdown-blockquote ${type}">${content}</blockquote>`;
            } catch (error) {
                console.error('Error in blockquote renderer:', error);
                return `<blockquote class="markdown-blockquote info">${String(quote || '')}</blockquote>`;
            }
        };

        return renderer;
    }

    generateTOC(content) {
        const headings = content.match(/^#{1,3}.*$/gm) || [];
        let toc = '## Table of Contents\n\n';
        
        headings.forEach(heading => {
            const level = heading.match(/^#+/)[0].length;
            const text = heading.replace(/^#+\s+/, '');
            const link = text.toLowerCase().replace(/[^\w]+/g, '-');
            const indent = '  '.repeat(level - 1);
            
            toc += `${indent}- [${text}](#section-${link})\n`;
        });
        
        return toc + '\n';
    }

    parseFrontMatter(content) {
        const frontMatterRegex = /^---\n([\s\S]*?)\n---\n([\s\S]*)$/;
        const match = content.match(frontMatterRegex);
        
        if (!match) {
            return {
                attributes: {},
                body: content
            };
        }

        const frontMatterStr = match[1];
        const body = match[2];
        
        const attributes = {};
        frontMatterStr.split('\n').forEach(line => {
            const [key, ...values] = line.split(':').map(str => str.trim());
            if (key && values.length) {
                let value = values.join(':').trim();
                if (value.startsWith('[') && value.endsWith(']')) {
                    value = value.slice(1, -1).split(',').map(item => item.trim());
                }
                else if (value.match(/^\d{4}-\d{2}-\d{2}$/)) {
                    value = new Date(value);
                }
                else if (value === 'true' || value === 'false') {
                    value = value === 'true';
                }
                else if (!isNaN(value)) {
                    value = Number(value);
                }
                attributes[key] = value;
            }
        });

        return { attributes, body };
    }

    async loadMarkdown(path, targetElementId) {
        try {
            console.log(`Loading markdown from ${path}...`);
            const response = await fetch(path);
            if (!response.ok) {
                throw new Error(`Failed to load markdown: ${response.status}`);
            }
            const content = await response.text();
            
            const { attributes, body } = this.parseFrontMatter(content);
            console.log('Parsed front matter:', attributes);
            
            const parsedContent = marked.parse(body);
            console.log('Parsed markdown content:', parsedContent);
            
            const targetElement = document.getElementById(targetElementId);
            if (!targetElement) {
                throw new Error(`Target element ${targetElementId} not found`);
            }

            targetElement.innerHTML = parsedContent;
            const currentContent = targetElement.innerHTML;
            
            Object.entries(attributes).forEach(([key, value]) => {
                targetElement.dataset[key] = typeof value === 'object' 
                    ? JSON.stringify(value) 
                    : value.toString();
            });
            
            if (targetElement.innerHTML !== currentContent) {
                console.log('Content was modified, restoring...');
                targetElement.innerHTML = currentContent;
            }
            
            const event = new CustomEvent('markdownLoaded', {
                detail: { 
                    targetId: targetElementId,
                    frontMatter: attributes,
                    path: path,
                    content: currentContent
                }
            });
            document.dispatchEvent(event);
            
            if (targetElement.innerHTML !== currentContent) {
                console.log('Content was modified by event handlers, restoring...');
                targetElement.innerHTML = currentContent;
            }
            
            console.log(`Markdown loaded successfully into ${targetElementId}`, attributes);
            return { success: true, attributes };
        } catch (error) {
            console.error(`Error loading markdown for ${targetElementId}:`, error);
            const targetElement = document.getElementById(targetElementId);
            if (targetElement) {
                targetElement.innerHTML = '<p>Error loading content. Please try again later.</p>';
            }
            return { success: false, error };
        }
    }

    async loadMultiple(configs) {
        const results = await Promise.allSettled(
            configs.map(config => 
                this.loadMarkdown(config.path, config.targetId)
            )
        );
        
        return results.map((result, index) => ({
            path: configs[index].path,
            targetId: configs[index].targetId,
            ...(result.status === 'fulfilled' ? result.value : { success: false, error: result.reason })
        }));
    }
}

document.addEventListener('markdownLoaded', (event) => {
    const { targetId, frontMatter, path, content } = event.detail;
    console.log(`Markdown loaded for ${targetId}:`, frontMatter);
    
    const targetElement = document.getElementById(targetId);
    if (!targetElement) return;

    const tempDiv = document.createElement('div');
    tempDiv.innerHTML = content;
    
    if (frontMatter.title) {
        const titleElement = document.querySelector(`#${targetId}-title`);
        if (titleElement) {
            titleElement.textContent = frontMatter.title;
        }
    }
    
    if (frontMatter.lastModified) {
        const lastModified = new Date(frontMatter.lastModified);
        const dateStr = lastModified.toLocaleDateString();
        const meta = document.createElement('div');
        meta.className = 'markdown-meta';
        meta.innerHTML = `Last updated: ${dateStr}`;
        tempDiv.appendChild(meta);
    }

    targetElement.innerHTML = tempDiv.innerHTML;
});

document.addEventListener('DOMContentLoaded', async () => {
    try {
        console.log('Initializing page...');
        
        const menuToggle = document.querySelector('.menu-toggle');
        const desktopIcons = document.querySelector('.desktop-icons');
        
        if (menuToggle && desktopIcons) {
            menuToggle.addEventListener('click', () => {
                desktopIcons.classList.toggle('active');
                menuToggle.textContent = desktopIcons.classList.contains('active') ? '√ó' : '‚ãÆ';
            });
        }

        const initSequence = async () => {
            const mdLoader = new MarkdownLoader();
            
            const markdownConfigs = [
                { path: './notes/about.md', targetId: 'notes-content' },
                { path: './notes/markdown.md', targetId: 'markdown-docs' }
            ];

            console.log('Loading markdown content...');
            const markdownResults = await mdLoader.loadMultiple(markdownConfigs);
            console.log('Markdown loading complete:', markdownResults);

            console.log('Initializing remaining features...');
            await generateSocialLinks().catch(error => {
                console.error('Error generating social links:', error);
            });

            await loadProjects().catch(error => {
                console.error('Error loading projects:', error);
            });

            updateVisitorCounter();
        };

        await initSequence();

    } catch (error) {
        console.error('Error initializing page:', error);
    }
});

================
File: notes/about.md
================
---
title: About Me
description: Software & Hardware Engineer's Journey
author: Paul Junsuk Han
date: 2024-01-03
tags: [engineering, software, hardware, AI]
category: profile
lastModified: 2024-01-03
visibility: public
---

<!--
SEO Keywords:
software engineer, hardware engineer, full stack developer, AI engineer, machine learning engineer,
technical architect, system design, neural networks, hardware optimization, engineering philosophy,
Paul Han, Paul Junsuk Han, software development, hardware development, engineering principles
-->

SWE, HWE, AI, builder, question asker. <h6>#40 <a href="https://guzey.com/people/" target="_blank">Alexey Guzey's People who are going to change the world</a></h6>

<!--
Core competencies: software, hardware design, distributed systems, machine learning
scalable solutions, performance optimization, technical leadership
-->




<div class="markdown-figure" style="width: 300px; margin: 0;">

![3D printed brain](/assets/images/image.png "3D printed from my MRI AI segmentation")

</div>

<h5> 3D printed my brain using MRI scan. Learned a lot. </h5>

<!--
Research areas: neural network optimization, hardware acceleration, 
AI model compression, efficient inference, edge computing, embedded AI
-->




<h3>Big Interests</h3>
AI Guardian - AI-Human intelligence augmentation. tFUS/BCI/neurotech. Silent speech interfaces.


<h6>no libraries were involved in the making of this website. </h6>

================
File: notes/markdown.md
================
---
title: Markdown System Documentation
description: Comprehensive guide to using the markdown system in this portfolio
author: Paul Junsuk Han
date: 2024-01-03
tags: [documentation, markdown, implementation, guide]
category: documentation
lastModified: 2024-01-03
visibility: public
---

<!--
SEO Keywords:
markdown implementation, front matter, content management system, static site generator,
documentation system, technical writing, web development, content parsing, markdown features,
syntax highlighting, responsive tables, custom containers
-->

# Markdown System Documentation

This portfolio uses a custom markdown system that allows for flexible content management with features like front matter, SEO optimization, and dynamic loading.

## Table of Contents
- [Core Features](#section-core-features)
- [Content Features](#section-content-features)
- [Implementation Details](#section-implementation-details)
- [Usage Guide](#section-usage-guide)
- [Styling](#section-styling)
- [Advanced Features](#section-advanced-features)
- [Troubleshooting](#section-troubleshooting)

## Core Features

### Front Matter
Every markdown file can include YAML-style front matter at the top:

```markdown
---
title: Your Title
description: Your description
author: Your Name
date: YYYY-MM-DD
tags: [tag1, tag2, tag3]
category: category-name
lastModified: YYYY-MM-DD
visibility: public|private
---
```

Supported front matter types:
- Strings: `title: Your Title`
- Dates: `date: 2024-01-03`
- Arrays: `tags: [item1, item2]`
- Booleans: `visibility: true`
- Numbers: `version: 1`

### SEO Comments
Add hidden SEO content using HTML comments:

```markdown
<!--
SEO Keywords:
keyword1, keyword2, keyword3
-->
```

## Content Features

### Images with Captions
Add images with captions using standard markdown syntax:

```markdown
![Alt text](path/to/image.jpg "Optional caption text")
```

Images are automatically:
- Lazy loaded
- Responsive
- Styled with shadows and borders
- Centered with captions

### Image Container Manipulation
You can wrap images in custom containers to control their size and positioning:

```markdown
<div class="markdown-figure" style="width: 300px; margin: 0 auto;">

![Image Title](/path/to/image.jpg "Caption text")

</div>
```

Container styling options:
- Width: `width: 300px` or `width: 50%`
- Alignment:
  - Center: `margin: 0 auto`
  - Left: `margin: 0`
  - Right: `margin: 0 0 0 auto`
  - Custom offset: `margin: 0 0 0 50px`
- Additional spacing: `padding: 20px`
- Max width: `max-width: 600px`

Note: Always add empty lines before and after the image markdown inside the container.

### Tables
Create responsive tables with automatic styling:

| Feature | Description | Support |
|---------|-------------|----------|
| Tables | Responsive tables | ‚úÖ |
| Images | Lazy loading | ‚úÖ |
| Links | Auto-detection | ‚úÖ |

### Links
The system supports both internal and external links with special styling:

- [Internal link to Projects](#projects)
- [External link to GitHub](https://github.com)

External links automatically:
- Open in new tabs
- Include security attributes
- Show external link indicator
- Have hover effects

### Code Blocks
Syntax highlighted code blocks with language support:

```javascript
const example = {
    feature: "syntax highlighting",
    supported: true
};
```

### Custom Containers
Special blockquote styles for different types of content:

> NOTE: This is a note container

> WARNING: This is a warning container

> TIP: This is a tip container

> This is a default info container

### Linkable Sections
All headers automatically:
- Generate clean URLs
- Show link icon on hover
- Support direct linking
- Use consistent IDs

## Implementation Details

### File Structure
```
/notes/          # General notes and documentation
/blog/           # Blog posts
/projects/       # Project descriptions
/sections/       # Page sections
```

### JavaScript Implementation
The system uses a `MarkdownLoader` class with these key features:

```javascript
const mdLoader = new MarkdownLoader();
const configs = [
    { path: './notes/about.md', targetId: 'notes-content' },
    { path: './blog/post.md', targetId: 'blog-content' }
];
await mdLoader.loadMultiple(configs);
```

### Event System
The system dispatches events when content is loaded:

```javascript
document.addEventListener('markdownLoaded', (event) => {
    const { targetId, frontMatter, path } = event.detail;
    // Handle loaded content
});
```

## Usage Guide

### 1. Create Markdown File
Create a new .md file in the appropriate directory:

```markdown
---
title: Your Content
description: Description
---

Your content here...
```

### 2. Add Container
Add a container in your HTML:

```html
<div id="your-content-id" class="markdown-content"></div>
```

### 3. Configure Loading
Add the configuration to your markdownConfigs:

```javascript
const markdownConfigs = [
    { path: './your/file.md', targetId: 'your-content-id' }
];
```

## Styling

The system includes comprehensive styles for all markdown elements:

```css
/* Base content styles */
.markdown-content {
    font-family: "Courier New", monospace;
    line-height: 1.6;
}

/* Image styles */
.markdown-figure {
    margin: 2rem 0;
    text-align: center;
}

/* Table styles */
.markdown-table {
    width: 100%;
    overflow-x: auto;
}

/* Custom containers */
.markdown-blockquote {
    border-left: 4px solid;
    background: rgba(0, 0, 0, 0.02);
}
```

## Advanced Features

### Table of Contents Generation
Automatically generate table of contents:

```javascript
const toc = mdLoader.generateTOC(markdownContent);
```

### Custom Event Handlers
```javascript
document.addEventListener('markdownLoaded', (event) => {
    if (event.detail.frontMatter.category === 'blog') {
        // Handle blog posts differently
    }
});
```

### Dynamic Loading
```javascript
async function loadContent(path, targetId) {
    await mdLoader.loadMarkdown(path, targetId);
}
```

## Best Practices

1. **Content Organization**
   - Use appropriate directories
   - Follow consistent naming
   - Keep related content together
   - Use front matter for metadata

2. **Performance**
   - Optimize images
   - Use lazy loading
   - Keep markdown files focused
   - Split large content

3. **Accessibility**
   - Use descriptive alt text
   - Maintain heading hierarchy
   - Provide clear link text
   - Test keyboard navigation

4. **SEO**
   - Include relevant keywords
   - Use proper meta tags
   - Structure content well
   - Update lastModified dates

## Troubleshooting

Common issues and solutions:

1. **Content Issues**
   - Check file paths
   - Verify front matter syntax
   - Validate markdown syntax
   - Check container IDs

2. **Styling Problems**
   - Inspect CSS hierarchy
   - Check class names
   - Verify media queries
   - Test responsiveness

3. **Loading Issues**
   - Check console errors
   - Verify file permissions
   - Test file access
   - Check event listeners

================
File: projects/neural-network/body.md
================
---
title: Neural Network Implementation Body
description: Technical implementation details
author: Paul Junsuk Han
date: 2024-01-03
tags: [neural-network, implementation, architecture]
category: project
lastModified: 2024-01-03
visibility: public
---

The visualization engine uses WebGL for hardware-accelerated rendering of complex network structures. React manages the UI state and user interactions, while Three.js provides the 3D rendering capabilities.

<div class="sketch-list">
<h3>Architecture Highlights</h3>
<ul>
<li>Core Architecture
    <ul>
    <li>WebGL-based rendering pipeline</li>
    <li>React component hierarchy</li>
    <li>Three.js scene management</li>
    </ul>
</li>
<li>Performance Optimizations
    <ul>
    <li>Custom WebGL shaders for node rendering</li>
    <li>Instanced geometry for large networks</li>
    <li>Optimized graph layout algorithms</li>
    </ul>
</li>
<li>Interactive Features
    <ul>
    <li>Real-time data flow visualization</li>
    <li>Node inspection and modification</li>
    <li>Network architecture manipulation</li>
    </ul>
</li>
<li>Development Tools
    <ul>
    <li>Modular component architecture</li>
    <li>Hot module replacement</li>
    <li>Comprehensive testing suite</li>
    </ul>
</li>
</ul>
</div>

================
File: projects/neural-network/config.html
================
<!-- Project Configuration -->
<div class="project-config" hidden>
    <!-- Project Metadata -->
    <div id="project-meta">
        <span id="project-title">Neural Network Visualizer - Project Details</span>
        <span id="project-github">https://github.com/pauljunsukhan/neural-network</span>
        <span id="project-date">1.02.2024</span>
    </div>

    <!-- Project Sections -->
    <div id="project-sections">
        <!-- Overview Section -->
        <section id="overview" data-markdown="./overview.md">
            <h2>Project Overview</h2>
        </section>

        <!-- Body Section -->
        <section id="body" data-markdown="./body.md">
            <h2>Body</h2>
        </section>
    </div>
</div>

================
File: projects/neural-network/index.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="Loading...">
    <title>Loading...</title>
    <link rel="stylesheet" href="../../styles/main.css">
    <!-- Add marked.js for markdown parsing -->
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
    <style>
        /* Project content styling to match regular paragraphs */
        .project-content {
            font-family: inherit;
            line-height: 1.6;
            color: var(--text-color);
        }

        .project-content p {
            margin-bottom: 1rem;
        }

        .project-content ul {
            margin: 1rem 0;
            padding-left: 0;
            list-style: none;
        }

        .project-content li {
            margin: 0.5rem 0;
            padding-left: 1rem;
            border-left: 2px solid var(--secondary-color);
        }

        /* Nested list styling */
        .project-content ul ul {
            margin: 0.5rem 0 0.5rem 1rem;
        }

        .project-content ul ul li {
            margin: 0.25rem 0;
        }

        /* Loading state */
        .mac-window.loading .content {
            opacity: 0.5;
            pointer-events: none;
        }

        .mac-window.loading::after {
            content: "Loading...";
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-family: "Courier New", monospace;
            color: var(--text-color);
        }
    </style>
</head>
<body>
    <!-- Add mobile menu toggle button -->
    <button class="menu-toggle">‚ãÆ</button>

    <!-- Classic Mac Menu Bar -->
    <div class="global-menu-bar">
        <span class="apple-menu">üçé</span>
        <div class="menu-divider"></div>
        <div id="menu-items"></div>
    </div>

    <!-- Desktop Icons -->
    <div class="desktop-icons" id="desktop-icons"></div>

    <!-- Main Project Window -->
    <main class="mac-window project-window loading">
        <div class="window-title-bar">
            <div class="window-controls">
                <div class="window-button"></div>
                <div class="window-button"></div>
                <div class="window-button"></div>
            </div>
            <div class="window-title" id="window-title">Loading...</div>
            <a href="#" class="window-link" id="github-link" target="_blank">Github</a>
        </div>

        <div class="content">
            <!-- Project Header -->
            <div class="notebook-header">
                <div class="date">Last Update: <span class="typewriter" id="last-update">Loading...</span></div>
            </div>

            <!-- Dynamic content container -->
            <div id="project-content"></div>
        </div>
    </main>

    <script>
        // Function to parse front matter from markdown content
        function parseFrontMatter(content) {
            const frontMatterRegex = /^---\n([\s\S]*?)\n---\n([\s\S]*)$/;
            const match = content.match(frontMatterRegex);
            
            if (!match) return { metadata: {}, content: content };
            
            const [, frontMatter, mainContent] = match;
            const metadata = {};
            
            // Parse YAML-style front matter
            frontMatter.split('\n').forEach(line => {
                const [key, ...values] = line.split(':');
                if (key && values.length) {
                    let value = values.join(':').trim();
                    // Handle arrays in square brackets
                    if (value.startsWith('[') && value.endsWith(']')) {
                        value = value.slice(1, -1).split(',').map(v => v.trim());
                    }
                    metadata[key.trim()] = value;
                }
            });
            
            return { metadata, content: mainContent };
        }

        // Function to update page metadata
        function updatePageMetadata(metadata, sectionId) {
            if (!metadata) return;

            // Update existing meta tags or create new ones
            Object.entries(metadata).forEach(([key, value]) => {
                if (Array.isArray(value)) {
                    value = value.join(', ');
                }
                
                // Skip empty values
                if (!value) return;

                // Create or update meta tags
                let meta = document.querySelector(`meta[name="${sectionId}-${key}"]`);
                if (!meta) {
                    meta = document.createElement('meta');
                    meta.name = `${sectionId}-${key}`;
                    document.head.appendChild(meta);
                }
                meta.content = value;
            });
        }

        // Load content synchronously to ensure it's available for preview
        async function loadContent() {
            try {
                // Get base URL from base tag or current location
                const baseTag = document.querySelector('base');
                const baseUrl = baseTag ? baseTag.href : window.location.href;
                const configUrl = new URL('config.html', baseUrl).href;

                // Load config
                const configResponse = await fetch(configUrl, {
                    cache: 'no-store',
                    headers: {
                        'Cache-Control': 'no-cache',
                        'Pragma': 'no-cache'
                    }
                });
                if (!configResponse.ok) throw new Error(`Failed to load config: ${configResponse.status}`);
                const configText = await configResponse.text();
                const tempDiv = document.createElement('div');
                tempDiv.innerHTML = configText;

                // Set metadata
                const meta = tempDiv.querySelector('#project-meta');
                if (!meta) throw new Error('Project metadata not found in config');
                
                // Update page title and metadata
                const projectTitle = meta.querySelector('#project-title').textContent;
                document.title = projectTitle;
                document.querySelector('meta[name="description"]').content = meta.querySelector('#project-description')?.textContent || projectTitle;
                
                // Update window title and links
                document.getElementById('window-title').textContent = projectTitle;
                const githubLink = document.getElementById('github-link');
                if (githubLink) {
                    githubLink.href = meta.querySelector('#project-github').textContent;
                }
                const lastUpdate = document.getElementById('last-update');
                if (lastUpdate) {
                    lastUpdate.textContent = meta.querySelector('#project-date').textContent;
                }

                // Set up menu items if we're not in preview mode
                if (!document.querySelector('.project-preview')) {
                    const menuItems = tempDiv.querySelectorAll('#menu-config .menu-item');
                    const menuContainer = document.getElementById('menu-items');
                    if (menuContainer) {
                        menuContainer.innerHTML = '';
                        menuItems.forEach(item => {
                            const span = document.createElement('span');
                            span.className = 'menu-item';
                            span.textContent = item.textContent;
                            menuContainer.appendChild(span);
                        });
                    }

                    // Set up desktop icons
                    const icons = tempDiv.querySelectorAll('#desktop-config .desktop-icon');
                    const iconsContainer = document.getElementById('desktop-icons');
                    if (iconsContainer) {
                        iconsContainer.innerHTML = '';
                        icons.forEach(icon => {
                            const a = document.createElement('a');
                            a.href = icon.getAttribute('data-href');
                            a.className = 'desktop-icon';
                            a.innerHTML = `
                                <div class="icon-image">${icon.getAttribute('data-emoji')}</div>
                                <div class="icon-label">${icon.textContent}</div>
                            `;
                            iconsContainer.appendChild(a);
                        });
                    }
                }

                // Load sections synchronously
                const contentDiv = document.getElementById('project-content');
                if (!contentDiv) throw new Error('Project content container not found');
                
                const sections = tempDiv.querySelectorAll('#project-sections section');
                if (sections.length === 0) throw new Error('No sections found in config');

                // Load all markdown content first
                const sectionContents = await Promise.all(Array.from(sections).map(async section => {
                    // Try to get markdown path from div inside section first
                    const markdownDiv = section.querySelector('div[data-markdown]');
                    const markdownPath = markdownDiv ? markdownDiv.getAttribute('data-markdown') : 
                                       section.getAttribute('data-markdown');
                                       
                    if (!markdownPath) {
                        console.warn(`No markdown path specified for section ${section.id}`);
                        return null;
                    }

                    const markdownUrl = new URL(markdownPath, baseUrl).href;
                    const markdownResponse = await fetch(markdownUrl, {
                        cache: 'no-store',
                        headers: {
                            'Cache-Control': 'no-cache',
                            'Pragma': 'no-cache'
                        }
                    });
                    if (!markdownResponse.ok) throw new Error(`Failed to load markdown: ${markdownResponse.status}`);
                    const markdownText = await markdownResponse.text();
                    
                    // Parse front matter and update metadata
                    const { metadata, content } = parseFrontMatter(markdownText);
                    updatePageMetadata(metadata, section.id);
                    
                    return {
                        section,
                        content: marked.parse(content)
                    };
                }));

                // Clear existing content
                contentDiv.innerHTML = '';

                // Now render all sections at once
                sectionContents.forEach(sectionContent => {
                    if (!sectionContent) return;

                    const sectionDiv = document.createElement('section');
                    sectionDiv.className = 'technical-sketch';
                    
                    // Add section title
                    const title = sectionContent.section.querySelector('h2');
                    if (title) {
                        sectionDiv.appendChild(title.cloneNode(true));
                    }
                    
                    // Create content container
                    const contentContainer = document.createElement('div');
                    contentContainer.className = 'project-content';
                    contentContainer.id = `${sectionContent.section.id}-content`;
                    contentContainer.innerHTML = sectionContent.content;
                    sectionDiv.appendChild(contentContainer);
                    
                    contentDiv.appendChild(sectionDiv);
                });

                // Remove loading state
                const mainWindow = document.querySelector('main.mac-window');
                if (mainWindow) {
                    mainWindow.classList.remove('loading');
                }
            } catch (error) {
                console.error('Error loading content:', error);
                document.getElementById('project-content').innerHTML = `<p>Error loading project content: ${error.message}</p>`;
                document.querySelector('main.mac-window').classList.remove('loading');
            }
        }

        // Load content immediately
        loadContent();
    </script>
</body>
</html>

================
File: projects/neural-network/overview.md
================
---
title: Neural Network Implementation
description: Technical details of the Neural Network Visualizer
author: Paul Junsuk Han
date: 2024-01-03
tags: [neural-network, webgl, react, threejs]
category: project
lastModified: 2024-01-03
visibility: public
---

The visualization engine uses WebGL for hardware-accelerated rendering of complex network structures. React manages the UI state and user interactions, while Three.js provides the 3D rendering capabilities.

<div class="sketch-list">
<h3>Architecture Highlights</h3>
<ul>
<li>Custom WebGL shaders for efficient node rendering
    <ul>
    <li>Fragment shaders for node coloring</li>
    <li>Vertex shaders for positioning</li>
    </ul>
</li>
<li>Optimized graph layout algorithms
    <ul>
    <li>Force-directed layout</li>
    <li>Hierarchical tree layout</li>
    </ul>
</li>
<li>Real-time data flow visualization</li>
<li>Modular component architecture</li>
</ul>
</div>

================
File: projects/quantum-circuit/index.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="Quantum Circuit Simulator - Browser-based quantum computing simulation tool">
    <title>Quantum Circuit Simulator | Paul Junsuk Han</title>
    <link rel="stylesheet" href="../../styles/main.css">
</head>
<body>
    <!-- Classic Mac Menu Bar -->
    <div class="global-menu-bar">
        <span class="apple-menu">üçé</span>
        <div class="menu-divider"></div>
        <span class="menu-item">File</span>
        <span class="menu-item">Edit</span>
        <span class="menu-item">View</span>
        <span class="menu-item">Special</span>
    </div>

    <!-- Main Project Window -->
    <main class="mac-window">
        <div class="window-title-bar">
            <div class="window-controls">
                <div class="window-button"></div>
                <div class="window-button"></div>
                <div class="window-button"></div>
            </div>
            <div class="window-title">Quantum Circuit Simulator - Project Details</div>
        </div>

        <div class="content">
            <!-- Project Header -->
            <div class="notebook-header">
                <div class="date">Status: <span class="typewriter">Beta Testing</span></div>
                <div class="subject">Project: <span class="typewriter">Quantum Computing Simulation</span></div>
            </div>

            <!-- Project Overview -->
            <section class="technical-sketch">
                <h2>Project Overview</h2>
                <p>A browser-based quantum circuit simulator that allows users to design, test, and visualize quantum circuits. Built with Python and WebAssembly, this tool makes quantum computing concepts accessible to students and researchers.</p>
                
                <div class="sketch-list">
                    <h3>Technical Specifications</h3>
                    <ul>
                        <li>Backend: Python, Qiskit</li>
                        <li>Frontend: WebAssembly, Three.js</li>
                        <li>Computation: NumPy, SciPy</li>
                        <li>Visualization: D3.js</li>
                    </ul>
                </div>
            </section>

            <!-- Key Features -->
            <section class="technical-sketch">
                <h2>Key Features</h2>
                <ul class="sketch-list">
                    <li>Visual quantum circuit designer</li>
                    <li>Real-time state vector visualization</li>
                    <li>Common quantum gate library</li>
                    <li>Measurement and error simulation</li>
                    <li>Circuit optimization suggestions</li>
                </ul>
            </section>

            <!-- Implementation Details -->
            <section class="technical-sketch">
                <h2>Implementation Details</h2>
                <p>The simulator leverages WebAssembly to run complex quantum computations directly in the browser. Python code is compiled to WebAssembly using Emscripten, while the frontend provides an intuitive interface for circuit design.</p>
                
                <div class="sketch-list">
                    <h3>Architecture Highlights</h3>
                    <ul>
                        <li>Quantum state vector simulation</li>
                        <li>Gate-level optimization</li>
                        <li>Interactive circuit visualization</li>
                        <li>Real-time computation feedback</li>
                    </ul>
                </div>
            </section>

            <!-- Project Links -->
            <section class="technical-sketch">
                <h2>Project Resources</h2>
                <ul class="sketch-list">
                    <li>Documentation: <a href="#" target="_blank">User Guide</a></li>
                    <li>Tutorial: <a href="#" target="_blank">Getting Started</a></li>
                    <li>Examples: <a href="#" target="_blank">Sample Circuits</a></li>
                </ul>
            </section>
        </div>
    </main>

    <script src="../../js/main.js" defer></script>
</body>
</html>

================
File: projects/under-construction/index.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="Under Construction - Classic 90s style project page with modern Mac aesthetics">
    <title>Under Construction | Paul Junsuk Han</title>
    <link rel="stylesheet" href="../../styles/main.css">
    <link rel="stylesheet" href="../../styles/construction.css">
</head>
<body>
    <!-- Add mobile menu toggle button -->
    <button class="menu-toggle">‚ãÆ</button>

    <!-- Classic Mac Menu Bar -->
    <div class="global-menu-bar">
        <span class="apple-menu">üçé</span>
        <div class="menu-divider"></div>
        <span class="menu-item">File</span>
        <span class="menu-item">Edit</span>
        <span class="menu-item">View</span>
        <span class="menu-item">Special</span>
    </div>

    <!-- Desktop Icons -->
    <div class="desktop-icons">
        <a href="../../" class="desktop-icon">
            <div class="icon-image">üíæ</div>
            <div class="icon-label">Home</div>
        </a>
        <a href="../../#projects" class="desktop-icon">
            <div class="icon-image">üìÅ</div>
            <div class="icon-label">Projects</div>
        </a>
        <a href="../../#about" class="desktop-icon">
            <div class="icon-image">üìù</div>
            <div class="icon-label">Notes</div>
        </a>
        <a href="../../#contact" class="desktop-icon">
            <div class="icon-image">‚úâÔ∏è</div>
            <div class="icon-label">Contact</div>
        </a>
    </div>

    <!-- Main Project Window -->
    <main class="mac-window">
        <div class="window-title-bar">
            <div class="window-controls">
                <div class="window-button"></div>
                <div class="window-button"></div>
                <div class="window-button"></div>
            </div>
            <div class="window-title">Project Under Construction</div>
            <a href="https://github.com/pauljunsukhan/portfolio" class="window-link" target="_blank">Github</a>
        </div>
        <div class="content">
            <div class="construction-wrapper">
                <div class="construction-sign">
                    <div class="construction-header">
                        <span class="barrier">üöß</span>
                        <span class="title">UNDER CONSTRUCTION</span>
                        <span class="barrier">üöß</span>
                    </div>
                    
                    <div class="construction-divider">- - - - - - - - - - - - - - - - -</div>
                    
                    <div class="construction-info">
                        <p>This project is currently in development.<br>Please check back soon!</p>
                    </div>
                    
                    <div class="construction-divider">- - - - - - - - - - - - - - - - -</div>
                    
                    <div class="webring-box">
                        <p>üë∑ Want more sites like this? Visit the <a href="http://amasci.com/weird.html" target="_blank">Webring</a>! ‚ú®</p>
                    </div>
                    
                    <div class="construction-divider">- - - - - - - - - - - - - - - - -</div>
                    
                    <div class="update-info">
                        Last Updated: <span class="date-underline">SEPTEMBER 1993</span>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <script src="../../js/main.js" defer></script>
</body>
</html>

================
File: projects/template.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="[Project Name] - [Brief Description]">
    <title>[Project Name] | Paul Junsuk Han</title>
    <link rel="stylesheet" href="../../styles/main.css">
</head>
<body>
    <!-- Classic Mac Menu Bar -->
    <div class="global-menu-bar">
        <span class="apple-menu">üçé</span>
        <div class="menu-divider"></div>
        <span class="menu-item">File</span>
        <span class="menu-item">Edit</span>
        <span class="menu-item">View</span>
        <span class="menu-item">Special</span>
    </div>

    <!-- Desktop Icons -->
    <div class="desktop-icons">
        <a href="../../" class="desktop-icon">
            <div class="icon-image">üíæ</div>
            <div class="icon-label">Home</div>
        </a>
        <a href="../../#projects" class="desktop-icon">
            <div class="icon-image">üìÅ</div>
            <div class="icon-label">Projects</div>
        </a>
        <a href="../../#about" class="desktop-icon">
            <div class="icon-image">üìù</div>
            <div class="icon-label">Notes</div>
        </a>
        <a href="../../#contact" class="desktop-icon">
            <div class="icon-image">‚úâÔ∏è</div>
            <div class="icon-label">Contact</div>
        </a>
    </div>

    <!-- Main Project Window -->
    <main class="mac-window">
        <div class="window-title-bar">
            <div class="window-controls">
                <div class="window-button"></div>
                <div class="window-button"></div>
                <div class="window-button"></div>
            </div>
            <div class="window-title">[Project Name] - Project Details</div>
            <a href="https://github.com/pauljunsukhan/[project-repo]" class="window-link" target="_blank">Github</a>
        </div>

        <div class="content">
            <!-- Project Header -->
            <div class="notebook-header">
                <div class="date">Status: <span class="typewriter">[Project Status]</span></div>
                <div class="subject">Project: <span class="typewriter">[Project Type]</span></div>
            </div>

            <!-- Project Overview -->
            <section class="technical-sketch">
                <h2>Project Overview</h2>
                <p>[Project description - A detailed paragraph explaining the project's purpose, goals, and significance.]</p>
                
                <div class="sketch-list">
                    <h3>Technical Specifications</h3>
                    <ul>
                        <li>Frontend: [Technologies]</li>
                        <li>Backend: [Technologies]</li>
                        <li>Core Tech: [Key Technologies]</li>
                        <li>Build/Deploy: [Tools]</li>
                    </ul>
                </div>
            </section>

            <!-- Key Features -->
            <section class="technical-sketch">
                <h2>Key Features</h2>
                <ul class="sketch-list">
                    <li>[Feature 1 with brief description]</li>
                    <li>[Feature 2 with brief description]</li>
                    <li>[Feature 3 with brief description]</li>
                    <li>[Feature 4 with brief description]</li>
                </ul>
            </section>

            <!-- Implementation Details -->
            <section class="technical-sketch">
                <h2>Implementation Details</h2>
                <p>[Technical overview - Explain the core technical implementation, architecture decisions, and notable technical challenges solved.]</p>
                
                <div class="sketch-list">
                    <h3>Architecture Highlights</h3>
                    <ul>
                        <li>[Technical highlight 1]</li>
                        <li>[Technical highlight 2]</li>
                        <li>[Technical highlight 3]</li>
                        <li>[Technical highlight 4]</li>
                    </ul>
                </div>
            </section>

            <!-- Project Links -->
            <section class="technical-sketch">
                <h2>Project Resources</h2>
                <ul class="sketch-list">
                    <li>Github Repository: <a href="https://github.com/pauljunsukhan/[project-repo]" target="_blank">View Source</a></li>
                    <li>Documentation: <a href="[docs-url]" target="_blank">Technical Docs</a></li>
                    <li>Live Demo: <a href="[demo-url]" target="_blank">Try it Out</a></li>
                </ul>
            </section>
        </div>
    </main>

    <script src="../../js/main.js" defer></script>
</body>
</html>

================
File: scripts/encode_config.js
================
const fs = require('fs');
const path = require('path');

// Read the original config
const configPath = path.join(__dirname, '../config/socials.json');
const config = JSON.parse(fs.readFileSync(configPath, 'utf8'));

// Process each social entry
Object.entries(config).forEach(([key, social]) => {
    if (social.type === 'dialog' && social.encrypt) {
        // Base64 encode the value
        social.value = Buffer.from(social.value).toString('base64');
    }
});

// Write the processed config
fs.writeFileSync(configPath, JSON.stringify(config, null, 4));

================
File: styles/construction.css
================
/* Construction page specific styles */
.construction-wrapper {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    min-height: 300px;
    padding: 2rem;
    text-align: center;
}

.construction-sign {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1.5rem;
    padding: 2rem;
    max-width: 600px;
    margin: 0 auto;
    transform: none !important;
}

.construction-header {
    display: flex;
    align-items: center;
    gap: 1rem;
    animation: fade 2s infinite;
}

.construction-header .barrier {
    font-size: 1.5rem;
}

.construction-header .title {
    font-family: "Courier New", monospace;
    font-size: 1.8rem;
    font-weight: bold;
    letter-spacing: 0.1em;
    color: var(--primary-color);
}

.construction-divider {
    width: 100%;
    color: #666;
    font-family: monospace;
    letter-spacing: 0.1em;
}

.construction-info {
    font-family: "Courier New", monospace;
    line-height: 1.6;
    margin: 1rem 0;
}

.webring-box {
    border: 1px dashed #666;
    padding: 1rem 2rem;
    font-family: "Courier New", monospace;
    border-radius: 4px;
    width: 100%;
    max-width: 500px;
}

.webring-box a {
    color: #008B8B;
    text-decoration: underline;
}

.webring-box a:hover {
    color: #006666;
}

.update-info {
    font-family: "Courier New", monospace;
    color: #333;
}

.date-underline {
    border-bottom: 1px solid #333;
    padding-bottom: 2px;
}

@keyframes fade {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.5; }
}

/* Mobile responsive adjustments */
@media (max-width: 768px) {
    .construction-wrapper {
        padding: 1rem;
    }

    .construction-sign {
        padding: 1.5rem;
    }

    .construction-header .title {
        font-size: 1.5rem;
    }
}

@media (max-width: 480px) {
    .construction-sign {
        padding: 1rem;
    }

    .construction-header .title {
        font-size: 1.2rem;
    }
}

================
File: styles/main.css
================
/* Reset and base styles */
:root {
    --primary-color: #2b2b2b;
    --secondary-color: #008b8b;  /* Vintage teal */
    --accent-color: #d4a017;     /* Mustard yellow */
    --background-color: #f5e6d3;  /* Aged paper */
    --text-color: #2b2b2b;
    --menu-bg: #f5e6d3;
    --window-bg: #fff9f0;        /* Slightly warmer white */
    --window-border: #2b2b2b;
    --grid-color: rgba(70, 40, 20, 0.1); /* Subtle brown grid */
    --max-width: 1000px;
    --spacing: 2rem;
    --window-margin: 40px;       /* Space around main window */
}

@media (max-width: 768px) {
    :root {
        --window-margin: 10px;
        --spacing: 1rem;
    }

    .window-title {
        padding: 0 10px;
        font-size: 12px;
    }

    .project-window .window-title {
        max-width: 150px;
    }

    .project-window .content h3 {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        max-width: calc(100% - 20px);
        font-size: 14px;
    }

    .desktop-icons {
        right: 5px;
        gap: 10px;
        transform: translateX(100%);
    }

    .desktop-icons.active {
        transform: translateX(0);
    }

    .desktop-icon {
        transform: scale(0.8);
    }

    .icon-label {
        font-size: 10px;
    }
    .project-grid {
        grid-template-columns: 1fr;
        gap: 1rem;
        padding: 0.5rem;
    }
}


@media (max-width: 480px) {
    .project-window .window-title {
        max-width: 120px;
    }

    .project-window .content h3 {
        font-size: 12px;
    }
}

/* Engineering Paper Background */
body {
    background-color: var(--background-color);
    padding-top: 40px;
    margin: 0;
    min-height: 100vh;
    background-image: 
        linear-gradient(var(--grid-color) 1px, transparent 1px),
        linear-gradient(90deg, var(--grid-color) 1px, transparent 1px);
    background-size: 20px 20px;
    position: relative;
    display: flex;
    flex-direction: column;
    align-items: center;
}

body::after {
    content: '';
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: 
        radial-gradient(circle at 50% 50%, rgba(255, 255, 240, 0.1) 0%, rgba(255, 240, 200, 0.2) 100%);
    pointer-events: none;
    z-index: 1;
}

/* Main Window Container */
main.mac-window {
    width: calc(100% - var(--window-margin) * 2);
    max-width: var(--max-width);
    margin: var(--window-margin) auto;
    background: var(--window-bg);
    border: 1px solid var(--window-border);
    border-radius: 6px 6px 2px 2px;  /* More pronounced top radius */
    box-shadow: 3px 3px 0 rgba(0, 0, 0, 0.1);
    position: relative;
}

/* Mac OS Classic Menu Bar with engineering twist */
.global-menu-bar {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    height: 20px;
    background: var(--menu-bg);
    border-bottom: 1px solid var(--window-border);
    display: flex;
    align-items: center;
    padding: 0 8px;
    z-index: 2000;
    font-family: "Chicago", "Helvetica Neue", sans-serif;
    font-size: 12px;
    white-space: nowrap;
    overflow: hidden;
}

.apple-menu {
    margin-right: 20px;
    padding: 2px 5px;
}

.apple-menu:hover {
    background: var(--primary-color);
    color: var(--menu-bg);
}

.menu-divider {
    width: 1px;
    height: 16px;
    background: var(--window-border);
    margin: 0 10px;
}

/* Window Title Bar Enhancement */
.window-title-bar {
    display: flex;
    align-items: center;
    background: var(--menu-bg);
    border-bottom: 1px solid var(--window-border);
    border-radius: 5px 5px 0 0;
    padding: 0 8px;
    height: 24px;
    font-family: "Courier New", monospace;
    font-size: 12px;
    position: relative;
}

.window-title {
    flex: 1 1 auto;
    min-width: 0;         /* crucial for Safari! */
    text-align: center;
    font-family: "Courier New", monospace;
    letter-spacing: 0.05em;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    max-width: 200px;
}

/* Typography - Engineering Style */
h1, h2, h3 {
    font-family: "Courier New", monospace;
    margin-bottom: 1.5rem;
    color: var(--primary-color);
    text-transform: uppercase;
    letter-spacing: 0.1em;
}

h1 { 
    font-size: 2rem; 
    border-bottom: 3px double var(--primary-color);
    padding-bottom: 0.5rem;
}

h2 { 
    font-size: 1.5rem;
    border-bottom: 1px solid var(--primary-color);
    padding-bottom: 0.3rem;
}

h3 { font-size: 1.2rem; }

/* Technical Sketch Enhancement */
.technical-sketch {
    border: 1px solid var(--primary-color);
    padding: 1.5rem;
    margin: 2rem 0;
    background-color: rgba(255, 255, 255, 0.7);
    position: relative;
    box-shadow: 2px 2px 0 rgba(0, 0, 0, 0.05);
}

.technical-sketch::before {
    content: '‚ú¶';
    position: absolute;
    top: -0.5rem;
    left: 1rem;
    background: var(--window-bg);
    padding: 0 0.5rem;
    color: var(--secondary-color);
}

.sketch-list {
    list-style: none;
    padding: 0;
}

.sketch-list li {
    margin: 0.5rem 0;
    padding-left: 1rem;
    border-left: 2px solid var(--secondary-color);
    font-family: "Courier New", monospace;
}

/* Window Controls Enhancement */
.window-controls {
    display: flex;
    gap: 6px;
    align-items: center;
    flex: 0 0 auto;  /* Prevent shrinking */
}

.window-button {
    width: 12px;
    height: 12px;
    border: 1px solid var(--window-border);
    border-radius: 50%;
    background: var(--window-bg);
    position: relative;
}

.window-button:first-child::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 8px;
    height: 2px;
    background: var(--window-border);
    opacity: 0.5;
}

.window-title {
    flex: 1 1 auto;
    min-width: 0;  /* Critical for ellipsis in flex container */
    text-align: center;
    font-family: "Courier New", monospace;
    letter-spacing: 0.05em;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    padding: 0 8px;
}

/* Desktop Icons Enhancement */
.desktop-icons {
    position: fixed;
    top: 40px;
    right: 20px;
    display: flex;
    flex-direction: column;
    gap: 20px;
    z-index: 1;
    transition: transform 0.3s ease;
}

@media (max-width: 768px) {
    .desktop-icons {
        right: 5px;
        gap: 10px;
        transform: translateX(100%); /* Hide by default on mobile */
    }

    .desktop-icons.active {
        transform: translateX(0);
    }

    .desktop-icon {
        transform: scale(0.8);
    }

    .icon-label {
        font-size: 10px;
    }
}

.desktop-icon {
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
    width: 64px;
    cursor: pointer;
    transition: transform 0.2s ease;
    text-decoration: none;
    color: inherit;
}

.desktop-icon:hover {
    transform: scale(1.05);
}

.icon-image {
    width: 32px;
    height: 32px;
    margin-bottom: 5px;
    background: var(--menu-bg);
    border: 1px solid var(--window-border);
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 20px;
}

.icon-label {
    font-family: "Courier New", monospace;
    font-size: 11px;
    color: var(--window-border);
    background: var(--menu-bg);
    padding: 2px 4px;
    border-radius: 0;
    border: 1px solid var(--window-border);
}

/* Content Area Enhancement */
.content {
    padding: var(--spacing);
    background: var(--window-bg);
    min-height: 200px;
}

/* Form styling with engineering aesthetic */
.form-group {
    margin-bottom: 1.5rem;
}

label {
    display: block;
    margin-bottom: 0.5rem;
    font-family: "Courier New", monospace;
    color: var(--primary-color);
}

input, textarea {
    width: 100%;
    padding: 0.5rem;
    border: 1px solid var(--window-border);
    background-color: var(--window-bg);
    font-family: "Courier New", monospace;
    margin-top: 0.25rem;
}

button {
    background: var(--menu-bg);
    color: var(--primary-color);
    border: 2px solid var(--window-border);
    padding: 0.5rem 1rem;
    font-family: "Courier New", monospace;
    cursor: pointer;
    text-transform: uppercase;
    letter-spacing: 0.1em;
    font-size: 12px;
}

button:hover {
    background: var(--secondary-color);
    color: var(--window-bg);
}

/* Menu items */
.menu-item {
    padding: 2px 8px;
    cursor: default;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.menu-item:hover {
    background: var(--primary-color);
    color: var(--menu-bg);
}



@media (max-width: 480px) {
    .window-title {
        max-width: 150px;
    }

    .menu-item {
        max-width: 40px;
    }

    .menu-item:nth-last-child(-n+2) {
        display: none;
    }
}

/* Notebook Header Enhancement */
.notebook-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 2rem;
    font-family: "Courier New", monospace;
    border-bottom: 1px dashed var(--primary-color);
    padding-bottom: 1rem;
    position: relative;
}

.header-left {
    flex: 1;
}

.header-right {
    flex-shrink: 0;
    margin-left: 2rem;
    width: 45px;  /* Set explicit width for container */
    height: 45px; /* Set explicit height for container */
}

.headshot {
    width: 100%;    /* Fill container width */
    height: 100%;   /* Fill container height */
    object-fit: cover;
    border: 1px solid var(--window-border);
    border-radius: 4px;
    display: block;  /* Remove any extra space */
}

.notebook-header::after {
    content: '';
    position: absolute;
    bottom: -5px;
    left: 0;
    right: 0;
    height: 1px;
    border-bottom: 1px dashed var(--primary-color);
    opacity: 0.5;
}

.date, .subject {
    margin: 0.5rem 0;
    font-size: 0.9rem;
    color: var(--primary-color);
}

.typewriter {
    border-bottom: 1px solid var(--primary-color);
    padding: 0 0.5rem;
}

/* Project grid */
.project-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 2rem;
    padding: 1rem;
    position: relative;
}


/* Project Windows - Match Main Window Style */
.project-window {
    position: relative;
    width: 100%;
    background: var(--window-bg);
    border: 1px solid var(--window-border);
    border-radius: 6px 6px 2px 2px;
    box-shadow: 2px 2px 0 rgba(0, 0, 0, 0.1);
    cursor: pointer;
    margin-bottom: 1.5rem;
    display: flex;
    flex-direction: column;
    min-height: 300px; /* Ensure consistent height */
    transition: transform 0.2s ease, box-shadow 0.2s ease;
}

.project-window:hover {
    transform: translateY(-2px);
    box-shadow: 4px 4px 0 rgba(0, 0, 0, 0.15);
}

/* Project pages have no hover */
main.mac-window.project-window {
    transform: none !important;
    transition: none;
}

main.mac-window.project-window:hover {
    box-shadow: 2px 2px 0 rgba(0, 0, 0, 0.1);
}

.project-window .content {
    padding: var(--spacing);
    background: var(--window-bg);
    flex: 1;
    display: flex;
    flex-direction: column;
}

.project-window .content > *:not(.project-actions) {
    flex-shrink: 0;
}

.project-window .content h3 {
    margin-top: 0;
    font-size: 1.1rem;
    color: var(--primary-color);
    border-bottom: 1px solid var(--primary-color);
    padding-bottom: 0.3rem;
    margin-bottom: 1rem;
}

.project-window .content p {
    font-family: "Courier New", monospace;
    line-height: 1.5;
    margin-bottom: 1rem;
    color: var(--text-color);
}

.project-window .content ul {
    list-style: none;
    padding: 0;
    margin: 0;
    font-family: "Courier New", monospace;
}

.project-window .content ul li {
    margin: 0.5rem 0;
    padding-left: 1rem;
    border-left: 2px solid var(--secondary-color);
    color: var(--text-color);
}

/* Keep the maximize button styling */
.maximize-button {
    background: var(--accent-color) !important;
    cursor: pointer;
}

.minimize-button {
    background: var(--secondary-color) !important;
    cursor: pointer;
}

/* Project Preview Window */
.project-preview {
    position: fixed;
    top: 8vh;
    left: 46.5%;
    transform: translateX(-50%);
    z-index: 2000;
    display: none;
    width: calc(100% - var(--window-margin) * 2);
    max-width: var(--max-width);
    height: 90vh;
}

.project-preview.active {
    display: block;
}

.project-preview .exit-button {
    position: absolute;
    top: -24px;
    left: 0;
    height: 24px;
    width: auto;
    padding: 0 12px;
    background: #ff3b30;
    border: 1px solid #c41e3a;
    border-radius: 5px 5px 0 0;
    border-bottom: none;
    color: var(--window-bg);
    font-family: "Courier New", monospace;
    font-size: 12px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s ease;
    z-index: 2001;
}

.project-preview .exit-button:hover {
    background: #ff1f1f;
}

.project-preview .preview-content {
    background: var(--window-bg);
    height: 100%;
    border: 1px solid var(--window-border);
    border-radius: 0 6px 2px 2px;
    box-shadow: 4px 4px 0 rgba(0, 0, 0, 0.2);
    position: relative;
    z-index: 2000;
    overflow: hidden;
}

.project-preview .preview-content main.mac-window {
    margin: 20px;
    width: calc(100% - 40px);
    height: calc(100% - 44px);
    border: 1px solid var(--window-border);
    border-radius: 6px 6px 2px 2px;
    overflow: auto;
    box-shadow: 2px 2px 0 rgba(0, 0, 0, 0.1);
    pointer-events: auto;
}

/* Prevent body scroll when preview is open */
body.preview-open {
    overflow: hidden;
}

/* Error Dialog */
.error-dialog {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: var(--window-bg);
    border: 1px solid var(--window-border);
    border-radius: 6px 6px 2px 2px;
    box-shadow: 4px 4px 0 rgba(0, 0, 0, 0.2);
    width: 300px;
    z-index: 2100;
    display: none;
    flex-direction: column;
}

.error-dialog.active {
    display: flex;
}

.error-dialog .window-title-bar {
    height: 24px;
    background: var(--menu-bg);
    border-bottom: 1px solid var(--window-border);
}

.error-dialog .window-button {
    background: #ff3b30; /* Apple red in our style */
    border-color: #c41e3a;
}

.error-dialog .content {
    padding: 2rem;
    text-align: center;
    font-family: "Courier New", monospace;
    font-size: 14px;
    color: var(--primary-color);
}

/* Update Github Button */
.project-button.github {
    border-color: var(--primary-color);
}

.project-button.github:hover {
    background: var(--primary-color);
}

/* Project Window Link Styles */
.project-window {
    border: 1px solid var(--window-border);
    border-radius: 6px 6px 2px 2px;
    box-shadow: 3px 3px 0 rgba(0, 0, 0, 0.1);
    background: var(--window-bg);
    margin-bottom: 1.5rem;
    width: 100%;
    transition: transform 0.2s ease, box-shadow 0.2s ease;
}

.project-link-button {
    position: absolute;
    right: 8px;
    top: 50%;
    transform: translateY(-50%);
    padding: 2px 8px;
    background: var(--menu-bg);
    border: 1px solid var(--window-border);
    border-radius: 3px;
    font-family: "Courier New", monospace;
    font-size: 11px;
    color: var(--primary-color);
    text-decoration: none;
    cursor: pointer;
    transition: all 0.2s ease;
}

.project-link-button:hover {
    background: var(--primary-color);
    color: var(--menu-bg);
}

/* Update Link Button */
.project-button.link {
    border-color: var(--window-border);
}

.project-button.link:hover {
    background: var(--window-border);
    color: var(--menu-bg);
}

/* Ensure buttons are clickable */
.project-link-button, 
.project-actions button,
.window-controls {
    pointer-events: auto;
    cursor: pointer;
}

/* Project Action Buttons */
.project-actions {
    margin-top: auto; /* Push to bottom */
    padding-top: 1rem;
    border-top: 1px solid var(--window-border);
    display: flex;
    gap: 1rem;
}

.project-button {
    flex: 1;
    background: var(--menu-bg);
    border: 1px solid var(--window-border);
    border-radius: 4px;
    padding: 0.5rem 1rem;
    font-family: "Courier New", monospace;
    font-size: 12px;
    color: var(--primary-color);
    cursor: pointer;
    transition: all 0.2s ease;
    text-align: center;
    text-decoration: none;
}

.project-button:hover {
    background: var(--window-border);
    color: var(--menu-bg);
}

.project-button.preview {
    border-color: var(--window-border);
}

.project-button.preview:hover {
    background: var(--window-border);
}

/* Social Links Section */
.social-links {
    padding: var(--spacing);
    margin-bottom: 0.5rem;
}

.social-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 1rem;
    padding: 1rem;
}

.social-link {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem;
    background: var(--menu-bg);
    border: 1px solid var(--window-border);
    border-radius: 4px;
    text-decoration: none;
    color: var(--primary-color);
    font-family: "Courier New", monospace;
    transition: all 0.2s ease;
    text-transform: none;
}

.social-link:hover {
    background: var(--window-border);
    color: var(--menu-bg);
    transform: translateY(-2px);
    box-shadow: 2px 2px 0 rgba(0, 0, 0, 0.1);
}

.social-icon {
    font-size: 1.2rem;
    min-width: 24px;
    text-align: center;
}

.social-label {
    font-size: 0.9rem;
    letter-spacing: 0.05em;
}

/* Email Button */
.email-button {
    width: 100%;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem;
    background: var(--menu-bg);
    border: 1px solid var(--window-border);
    border-radius: 4px;
    text-decoration: none;
    color: var(--primary-color);
    font-family: "Courier New", monospace;
    transition: all 0.2s ease;
    cursor: pointer;
}

.email-button:hover {
    background: var(--window-border);
    color: var(--menu-bg);
    transform: translateY(-2px);
    box-shadow: 2px 2px 0 rgba(0, 0, 0, 0.1);
}

/* Email Dialog */
.email-dialog {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: var(--window-bg);
    border: 1px solid var(--window-border);
    border-radius: 6px 6px 2px 2px;
    box-shadow: 4px 4px 0 rgba(0, 0, 0, 0.2);
    width: 300px;
    z-index: 2100;
    display: none;
    flex-direction: column;
}

.email-dialog.active {
    display: flex;
}

.email-dialog .window-title-bar {
    height: 24px;
    background: var(--menu-bg);
    border-bottom: 1px solid var(--window-border);
}

.email-dialog .window-button.close-button {
    background: #ff3b30;
    border-color: #c41e3a;
}

.email-dialog .content {
    padding: 2rem;
    text-align: center;
    font-family: "Courier New", monospace;
    font-size: 14px;
    color: var(--primary-color);
}

/* Add overlay for email dialog */
.overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    z-index: 2000;
    display: none;
}

.overlay.active {
    display: block;
}

/* Message Button */
.message-button {
    cursor: pointer;
}

.message-button:hover {
    background: var(--window-border);
    color: var(--menu-bg);
    transform: translateY(-2px);
    box-shadow: 2px 2px 0 rgba(0, 0, 0, 0.1);
}

/* Mac Dialog */
.mac-dialog {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: var(--window-bg);
    border: 1px solid var(--window-border);
    border-radius: 6px 6px 2px 2px;
    box-shadow: 4px 4px 0 rgba(0, 0, 0, 0.2);
    width: 300px;
    z-index: 2100;
    display: none;
    flex-direction: column;
}

.mac-dialog.active {
    display: flex;
}

.mac-dialog .window-title-bar {
    height: 24px;
    background: var(--menu-bg);
    border-bottom: 1px solid var(--window-border);
}

.mac-dialog .window-button.close-button {
    background: #ff3b30;
    border-color: #c41e3a;
}

.mac-dialog .content {
    padding: 2rem;
    text-align: center;
    font-family: "Courier New", monospace;
    font-size: 14px;
    color: var(--primary-color);
}

.mac-dialog .content p {
    margin: 0.5rem 0;
}

/* Visitor Counter */
.visitor-counter {
    text-align: center;
    margin: 0 auto 1rem;
    width: fit-content;
    background: var(--window-bg);
}

.counter-display {
    display: flex;
    justify-content: center;
    gap: 1px;
    background: #000;
    padding: 2px;
    border: 1px solid #444;
}

.counter-digit {
    display: inline-block;
    background: #000;
    color: #32CD32;
    font-family: "VT323", "Courier New", monospace;
    font-size: 14px;
    font-weight: bold;
    min-width: 12px;
    padding: 2px;
    text-shadow: 0 0 5px #32CD32;
}

/* Window Title Bar Link */
.window-link {
    position: absolute;
    right: 8px;
    color: var(--window-bg);
    text-decoration: none;
    font-size: 11px;
    padding: 2px 6px;
    background: #2ea538; /* Muted retro Mac green */
    border: 1px solid #1e7a28; /* Darker muted green for border */
    border-radius: 3px;
    transition: all 0.2s ease;
}

.window-link:hover {
    background: #1e7a28; /* Darker muted green on hover */
    color: var(--window-bg);
}

/* Construction Page Styles */
.construction-content {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    height: 100%;
    text-align: center;
    padding: 2rem;
    font-family: "Courier New", monospace;
}

.construction-title {
    font-size: 2rem;
    margin-bottom: 2rem;
    letter-spacing: 0.2em;
    border-bottom: none;
    animation: blink 2s infinite;
}

.construction-message {
    font-size: 1.2rem;
    margin-bottom: 2rem;
    line-height: 1.5;
}

.construction-animation {
    font-size: 2rem;
    margin: 2rem 0;
    padding: 1rem;
    border: 2px dashed var(--primary-color);
    border-radius: 4px;
    text-align: center;
}

.construction-animation a {
    color: var(--secondary-color);
    text-decoration: none;
    font-weight: bold;
    padding: 0 4px;
    border-bottom: 2px solid var(--secondary-color);
    transition: all 0.2s ease;
}

.construction-animation a:hover {
    background: var(--secondary-color);
    color: var(--window-bg);
}

@keyframes blink {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.5; }
}

.construction-divider {
    width: 50%;
    height: 2px;
    background: repeating-linear-gradient(
        90deg,
        var(--primary-color),
        var(--primary-color) 10px,
        transparent 10px,
        transparent 20px
    );
    margin: 2rem 0;
}

/* Add toggle button for mobile */
.menu-toggle {
    display: none;
    position: fixed;
    top: 50%;
    right: 0;
    width: 20px;
    height: 40px;
    background: var(--menu-bg);
    border: 1px solid var(--window-border);
    border-right: none;
    border-radius: 4px 0 0 4px;
    cursor: pointer;
    z-index: 2;
    align-items: center;
    justify-content: center;
}

@media (max-width: 768px) {
    .menu-toggle {
        display: flex;
    }
}

/* Project preview window title */
.project-preview .window-title {
    max-width: 300px;  /* Larger for preview window */
}

@media (max-width: 480px) {
    .window-title {
        max-width: 150px;
    }
    
    .project-preview .window-title {
        max-width: 200px;
    }
}

.window-title-bar {
    background: var(--title-bar-bg);
    padding: 2px 4px;
    display: flex;
    align-items: center;
    position: relative;
    border-bottom: 1px solid var(--window-border);
}

.window-controls {
    display: flex;
    gap: 4px;
    z-index: 1;
}

.window-buttons {
    display: flex;
    gap: 8px;
    margin-left: auto;
    z-index: 1;
}

/* Ensure buttons don't get cut off */
.preview-button, .github-button {
    white-space: nowrap;
    min-width: fit-content;
}

/* Mobile responsive styles */
@media (max-width: 768px) {
    .window-title-bar {
        padding: 2px;
        gap: 4px;
    }

    .window-title {
        font-size: 14px;
        max-width: 160px;
        padding: 0 8px;
    }

    .project-window .window-title {
        max-width: 120px;
    }

    .project-window .content h3 {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        max-width: calc(100% - 20px);
    }

    .project-window {
        width: 100%;
        margin: 0;
    }

    .window-buttons {
        gap: 4px;
    }

    .preview-button, .github-button {
        padding: 2px 6px;
        font-size: 12px;
    }
}

/* Even smaller screens */
@media (max-width: 480px) {
    .window-title {
        max-width: 120px;
    }

    .project-window .window-title {
        max-width: 100px;
    }

    .window-buttons {
        gap: 2px;
    }

    .preview-button, .github-button {
        padding: 2px 4px;
        min-width: auto;
    }
}

/* Project window specific styles */
.project-window .window-title {
    max-width: 200px;
}

@media (max-width: 768px) {
    .project-window .window-title {
        max-width: 160px;
    }
}

@media (max-width: 480px) {
    .project-window .window-title {
        max-width: 120px;
    }
}

@media (max-width: 390px) {  /* iPhone 15 width */
    .window-title {
        font-size: 11px;
        margin: 0 4px;
        max-width: 140px;  /* Specific constraint for iPhone */
    }
    
    .window-buttons {
        gap: 4px;
    }
    
    .preview-button, .github-button {
        padding: 2px 4px;
        font-size: 10px;
    }
}

.window-buttons {
    display: flex;
    gap: 8px;
    align-items: center;
    flex-shrink: 0;  /* Prevent buttons from shrinking */
}

.preview-button, .github-button {
    padding: 2px 6px;
    border: 1px solid var(--window-border);
    border-radius: 3px;
    background: var(--window-bg);
    font-family: "Courier New", monospace;
    font-size: 11px;
    cursor: pointer;
    white-space: nowrap;
    text-decoration: none;
    color: var(--text-color);
}

.window-controls {
    display: flex;
    gap: 6px;
    align-items: center;
    flex: 0 0 auto;  /* Prevent shrinking */
}

.window-buttons {
    display: flex;
    gap: 8px;
    align-items: center;
    flex: 0 0 auto;  /* Prevent shrinking */
}

@media (max-width: 480px) {
    .window-buttons {
        gap: 4px;
    }
    
    .preview-button, .github-button {
        padding: 2px 4px;
        font-size: 10px;
    }
}

/* Change from .github-button to be more specific */
.project-window .github-button,
.window-title-bar .github-button {
    /* Keep the same styles that were in .github-button */
}

/* Notes Content Styles */
.notes-content {
    font-family: "Courier New", monospace;
    line-height: 1.6;
    color: var(--text-color);
    margin-bottom: 2rem;
}

.notes-content h1 {
    font-size: 1.8rem;
    margin-bottom: 1rem;
    padding-bottom: 0.5rem;
    border-bottom: 2px solid var(--secondary-color);
}

.notes-content h2 {
    font-size: 1.4rem;
    margin: 1.5rem 0 1rem;
    padding-bottom: 0.3rem;
    border-bottom: 1px solid var(--secondary-color);
}

.notes-content h3 {
    font-size: 1.2rem;
    margin: 1.2rem 0 0.8rem;
}

.notes-content p {
    margin-bottom: 1rem;
}

.notes-content ul, .notes-content ol {
    margin: 1rem 0;
    padding-left: 1.5rem;
}

.notes-content li {
    margin: 0.5rem 0;
    padding-left: 0.5rem;
}

.notes-content code {
    font-family: "Courier New", monospace;
    background: rgba(0, 0, 0, 0.05);
    padding: 0.2rem 0.4rem;
    border-radius: 3px;
}

.notes-content pre {
    background: rgba(0, 0, 0, 0.05);
    padding: 1rem;
    border-radius: 4px;
    overflow-x: auto;
    margin: 1rem 0;
}

.notes-content pre code {
    background: none;
    padding: 0;
}

.notes-content blockquote {
    border-left: 3px solid var(--secondary-color);
    margin: 1rem 0;
    padding-left: 1rem;
    font-style: italic;
}

/* Markdown metadata styles */
.markdown-meta {
    font-size: 0.8rem;
    color: var(--secondary-color);
    font-style: italic;
    margin-top: 2rem;
    padding-top: 1rem;
    border-top: 1px dashed var(--secondary-color);
    text-align: right;
}

.notes-content h1 {
    font-size: 1.8rem;
    margin-bottom: 1rem;
    padding-bottom: 0.5rem;
    border-bottom: 2px solid var(--secondary-color);
}

/* Enhanced markdown styles */
.markdown-figure {
    margin: 2rem 0;
    text-align: center;
}

.markdown-image {
    max-width: 100%;
    height: auto;
    display: block;
    margin: 0 auto;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

/* Images with explicit width */
.markdown-image[style*="width"] {
    max-width: none;
    object-fit: contain;
}

.markdown-caption {
    margin-top: 0.5rem;
    font-size: 0.9rem;
    color: var(--text-secondary);
    text-align: center;
}

/* Ensure image with explicit width maintains aspect ratio */
.markdown-image[style*="width"] {
    height: auto;
    object-fit: contain;
}

.markdown-link {
    color: var(--secondary-color);
    text-decoration: none;
    border-bottom: 1px dashed var(--secondary-color);
    transition: all 0.2s ease;
}

.markdown-link:hover {
    color: var(--accent-color);
    border-bottom-style: solid;
}

.markdown-link.external::after {
    content: '‚Üó';
    display: inline-block;
    margin-left: 0.2em;
    font-size: 0.8em;
}

/* Linkable section headers */
.notes-content h1,
.notes-content h2,
.notes-content h3,
.notes-content h4,
.notes-content h5,
.notes-content h6 {
    position: relative;
}

.header-anchor {
    position: absolute;
    left: -1.5em;
    top: 50%;
    transform: translateY(-50%);
    padding: 0 0.5em;
    color: var(--secondary-color);
    text-decoration: none;
    opacity: 0;
    transition: opacity 0.2s ease;
}

.notes-content h1:hover .header-anchor,
.notes-content h2:hover .header-anchor,
.notes-content h3:hover .header-anchor,
.notes-content h4:hover .header-anchor,
.notes-content h5:hover .header-anchor,
.notes-content h6:hover .header-anchor {
    opacity: 1;
}

.header-anchor:hover {
    color: var(--accent-color);
}

/* Table styles */
.table-container {
    width: 100%;
    overflow-x: auto;
    margin: 2rem 0;
}

.markdown-table {
    width: 100%;
    border-collapse: collapse;
    font-family: "Courier New", monospace;
    font-size: 0.9rem;
}

.markdown-table th,
.markdown-table td {
    padding: 0.75rem;
    border: 1px solid var(--window-border);
    text-align: left;
}

.markdown-table th {
    background: var(--menu-bg);
    font-weight: bold;
}

.markdown-table tr:nth-child(even) {
    background: rgba(0, 0, 0, 0.02);
}

/* Link styles */
.markdown-link {
    color: var(--secondary-color);
    text-decoration: none;
    border-bottom: 1px dashed var(--secondary-color);
    transition: all 0.2s ease;
}

.markdown-link:hover {
    color: var(--accent-color);
    border-bottom-style: solid;
}

.markdown-link.external::after {
    content: '‚Üó';
    display: inline-block;
    margin-left: 0.2em;
    font-size: 0.8em;
}

/* Custom containers */
.markdown-blockquote {
    margin: 1.5rem 0;
    padding: 1rem 1.5rem;
    border-left: 4px solid var(--secondary-color);
    background: rgba(0, 0, 0, 0.02);
    border-radius: 0 4px 4px 0;
}

.markdown-blockquote.note {
    border-color: #3498db;
    background: rgba(52, 152, 219, 0.05);
}

.markdown-blockquote.warning {
    border-color: #e74c3c;
    background: rgba(231, 76, 60, 0.05);
}

.markdown-blockquote.tip {
    border-color: #2ecc71;
    background: rgba(46, 204, 113, 0.05);
}

/* Code highlighting */
.hljs {
    background: rgba(0, 0, 0, 0.02) !important;
    padding: 1rem !important;
    border-radius: 4px;
    font-family: "Courier New", monospace;
}

/* Table of Contents */
.markdown-toc {
    background: var(--menu-bg);
    padding: 1.5rem;
    border: 1px solid var(--window-border);
    border-radius: 4px;
    margin: 2rem 0;
}

.markdown-toc ul {
    list-style: none;
    padding-left: 1rem;
}

.markdown-toc li {
    margin: 0.5rem 0;
}

/* Mobile responsiveness */
@media (max-width: 768px) {
    .markdown-table {
        font-size: 0.8rem;
    }
    
    .markdown-table th,
    .markdown-table td {
        padding: 0.5rem;
    }
    
    .markdown-blockquote {
        padding: 0.75rem 1rem;
    }
}

================
File: CNAME
================
pauljunsukhan.com

================
File: DESIGN.md
================
# Design System Documentation

## Color Palette
- Primary: #2b2b2b (Dark gray)
- Secondary: #008b8b (Vintage teal)
- Accent: #d4a017 (Mustard yellow)
- Background: #f5e6d3 (Aged paper)
- Window Background: #fff9f0 (Warm white)
- Menu Background: #f5e6d3 (Matches background)
- Border: #2b2b2b (Dark gray)
- Grid: rgba(70, 40, 20, 0.1) (Subtle brown)
- Error/Exit: #ff3b30 (Apple red)
- Error Border: #c41e3a (Darker red)
- Github/Action: #2ea538 (Muted retro Mac green)
- Github/Action Border: #1e7a28 (Darker muted green)

## Typography
- Primary Font: "Courier New", monospace
- Menu Font: "Chicago", "Helvetica Neue", sans-serif
- LED Font: "VT323", "Courier New", monospace
- Font Sizes: 
  - Base: 12px
  - Content: 14px
  - Small: 11px (window links, icon labels)
- Line Height: 1.5
- Letter Spacing: 0.05em (normal), 0.1em (headings)

## Layout
- Max Width: 1000px
- Window Margin: 40px
- Content Padding: 2rem
- Grid Gap: 1rem, 2rem (project grid)
- Border Radius: 
  - Windows: 6px 6px 2px 2px
  - Buttons: 3px
  - Action Buttons: 4px

## Desktop Icons Navigation
1. Position & Layout
   - Fixed position on right side
   - Top margin: 40px from top
   - Right margin: 20px from edge
   - Vertical stack with 20px gap
   - Z-index: 1 (above background, below windows)

2. Icon Structure
   - Width: 64px
   - Two-part design: icon image and label
   - Icon image: 32px √ó 32px
   - Background: var(--menu-bg)
   - Border: 1px solid var(--window-border)

3. Icon Types & Links
   - Home: Links to root page (/), floppy disk icon (üíæ)
   - Projects: Scrolls to #projects section, folder icon (üìÅ)
   - Notes: Scrolls to #about (Field Notes) section, note icon (üìù)
   - Contact: Scrolls to #contact section, envelope icon (‚úâÔ∏è)

4. Visual Style
   - No text decoration on links
   - Inherits text color from parent
   - Scale animation on hover (1.05)
   - Cursor: pointer
   - Label background matches menu background
   - Label border matches window border

5. Label Design
   - Font: "Courier New", monospace
   - Font size: 11px
   - Padding: 2px 4px
   - Border: 1px solid var(--window-border)
   - Background: var(--menu-bg)

## Window Components
1. Title Bar
   - Height: 24px
   - Background: var(--menu-bg)
   - Border-bottom: 1px solid var(--window-border)
   - Centered title text
   - Left-aligned control buttons
   - Right-aligned action buttons (Github, etc.)

2. Control Buttons
   - Size: 12px √ó 12px
   - Border-radius: 50%
   - Border: 1px solid var(--window-border)
   - Special states:
     - Close: #ff3b30 (Apple red)
     - Minimize: var(--secondary-color)
     - Maximize: var(--accent-color)

3. Action Buttons
   - Github Link: Muted retro Mac green (#2ea538)
   - Equal width, flex layout
   - 1px border, 3px border radius
   - Hover darkens color
   - White text for contrast
   - Font size: 11px
   - Padding: 2px 6px

4. Content Area
   - Direct content placement
   - Clean typography
   - Engineering-style headings
   - List items with left borders

## Preview Windows
- Fixed position overlay
- Width matches main portfolio window
- Left offset at 46.5%
- Vertical positioning:
  - Top: 8% of viewport height
  - Height: 90% of viewport height
  - Scales with different screen sizes
- Exit button design:
  - Tab-like appearance
  - Apple red (#ff3b30) background
  - Positioned above window
  - Connected to window (no bottom border)
  - Straight corner where it meets window
- Content window:
  - Straight top-left corner (connects with tab)
  - Rounded top-right corner (6px)
  - Slight bottom corners (2px)
  - Inner content scrollable
  - Maintains pointer events

## Dialog System
1. Error Dialog
   - Centered modal
   - Red close button
   - Simple "Oops!" message
   - Matches window styling
   - Appears for missing links

2. Contact Dialogs (Email, Discord, Messaging)
   - Centered modals
   - Protected content (base64 encoded)
   - Selectable text
   - Red close button
   - Consistent styling with windows

## Project Windows
1. Window Structure
   - Title bar with window controls
   - Content area with project details
   - Action buttons at bottom
   - Github link in top-right corner
   - Consistent green styling for action buttons

2. Button Types
   - Preview: Opens project in overlay window
   - Link: Native `<a>` tag for browser context menu
   - Github: External repository link in muted green
   - All buttons maintain Mac-style aesthetics

3. Link Functionality
   - Right-click enabled for context menu
   - Copy URL supported
   - Open in new tab option
   - Native browser interactions preserved

## Visitor Counter
- LED-style display with green text (#32CD32)
- Text glow effect using text-shadow
- 6-digit display with leading zeros
- Monospace font (VT323 with Courier New fallback)
- Subtle border and padding
- Hidden badge for tracking
- JavaScript updates display from badge

## Best Practices
1. Maintain consistent window styling
2. Use proper nesting hierarchy
3. Keep content directly in window content areas
4. Follow classic Macintosh interaction patterns
5. Preserve engineering notebook aesthetics
6. Use appropriate button types for different actions
7. Provide clear feedback for all interactions
8. Ensure content is selectable where appropriate
9. Maintain consistent spacing and alignment
10. Use semantic HTML structure

## Future Considerations
1. Window stacking and z-index management
2. Window resize functionality
3. Menu bar interaction implementation
4. Desktop icon functionality
5. Project page templates
6. Mobile responsiveness
7. Accessibility enhancements
8. Additional dialog types
9. Enhanced animation effects
10. Touch device support

================
File: IMPLEMENTATION.md
================
# Implementation Details

## Project Configuration System

### Project JSON Structure
Projects are configured in `config/projects.json` using the following structure:
```json
{
  "projects": [
    {
      "id": "project-id",          // Unique identifier for the project
      "title": "Project Title",    // Display title
      "subtitle": "PROJECT TYPE",  // Project category/type
      "description": "...",        // Brief description
      "specs": [                   // Technical specifications shown as bullet points
        "Tech: Technology Stack",
        "Status: Project Status",
        "Role: Developer Role"
      ],
      "buttons": {                 // Configuration for action buttons
        "preview": "/projects/path",  // Path for preview window
        "link": "/projects/path",     // Direct link to project
        "github": "https://github.com/..." // GitHub repository link
      }
    }
  ]
}
```

### Loading and Rendering
The project windows are dynamically generated when the page loads:
1. `loadProjects()` fetches the configuration from `projects.json`
2. Each project is rendered into a window using `createProjectWindow()`
3. Windows are added to the `.dynamic-projects` container in the DOM
4. Event listeners are initialized through `initializeProjectWindows()`

## Social Links System

### Social JSON Structure
Social links are configured in `config/socials.json`:
```json
{
  "social-id": {
    "icon": "emoji",           // Emoji icon to display
    "label": "Display Name",   // Button label
    "type": "link|dialog",     // Type of interaction
    "url": "https://...",      // For type: "link"
    "value": "content",        // For type: "dialog"
    "dialogContent": "...",    // Optional extra dialog content
    "encrypt": true           // Optional: Base64 encode value to protect from bots
  }
}
```

### Class Naming Convention
Social link elements use the class pattern `social-${key}` instead of `${key}-button` to avoid styling conflicts with project window buttons that may share the same key (e.g., GitHub buttons). This was implemented to solve a specific styling conflict:

1. **The Problem:**
   - Project windows have a GitHub button styled with the class `github-button`
   - Social links were originally using the same pattern (`${key}-button`), causing the GitHub social link to inherit project button styles
   - This made the GitHub social link appear visually inconsistent with other social links

2. **The Solution:**
   - Changed social link class pattern to `social-${key}`
   - Updated CSS selectors to be more specific for project buttons (`.project-window .github-button`)
   - This ensures project GitHub buttons and social GitHub links maintain their distinct styles

This naming convention maintains clear separation between project window controls and social link elements while preserving the intended styling for each.

### Dialog System
For social links of type "dialog":
1. Creates a Mac-style dialog window with:
   - Title bar with close button
   - Content area with optional dialog content
   - Protected content (e.g., email, messaging info)
2. Dialog interactions:
   - Opens on button click
   - Closes via:
     - Close button click
     - Clicking outside the dialog (overlay)
     - Pressing Escape key
3. Multiple dialogs can be created but only one shows at a time
4. Contact Protection:
   - Sensitive information (email, messaging) is Base64 encoded in the config
   - Decoding happens only when dialog is displayed
   - Helps prevent scraping by bots while maintaining usability

## Project Windows

### Preview System
Project previews are handled through:
1. Preview button click triggers:
   - Fetches project's index.html
   - Extracts main window content
   - Displays in preview overlay
2. Error handling:
   - Shows "Coming Soon" for missing/invalid content
   - Maintains consistent UI for errors
3. Preview window controls:
   - Exit button in tab-style design
   - Escape key closes preview
   - Smooth transitions with animations

### Window Interactions
Project windows support:
1. Direct navigation:
   - Clicking window area goes to project page
   - Link button opens in current tab
   - GitHub button opens repository in new tab
2. Preview functionality:
   - Shows project content in overlay
   - Maintains scroll position
   - Preserves original window state

## Initialization Flow

1. DOM Content Loaded triggers:
   ```javascript
   document.addEventListener('DOMContentLoaded', async () => {
       await generateSocialLinks();  // Setup social buttons/dialogs
       updateVisitorCounter();       // Initialize visitor counter
       await loadProjects();         // Load and render projects
   });
   ```

2. Project Loading:
   ```javascript
   async function loadProjects() {
       const data = await fetch('/config/projects.json');
       data.projects.forEach(project => {
           const window = createProjectWindow(project);
           dynamicProjectsGrid.appendChild(window);
       });
       initializeProjectWindows();  // Setup event listeners
   }
   ```

3. Social Links:
   ```javascript
   async function generateSocialLinks() {
       const config = await loadSocialConfig();
       Object.entries(config).forEach(([key, social]) => {
           // Create buttons and dialogs
           // Setup event listeners
       });
   }
   ```

## Error Handling

1. Project Loading:
   - Fallback to under-construction page
   - Graceful error messages
   - Console logging for debugging

2. Social Links:
   - Skip invalid configurations
   - Protected content handling
   - Dialog error states

3. Visitor Counter:
   - Handles missing elements
   - Fallback for invalid counts
   - Error-resistant observer

## Benefits

1. **Maintainability**
   - Configuration-driven content
   - Centralized project management
   - Modular dialog system

2. **User Experience**
   - Consistent interface
   - Smooth transitions
   - Graceful error handling

3. **Development**
   - Easy to add new projects
   - Flexible dialog system
   - Clear initialization flow 

### URL Linkification in Project Specs

The project configuration system supports automatic URL linkification for specs that start with "Link:". This allows project links to be displayed as clickable elements rather than plain text.

Example spec in `projects.json`:
```json
"specs": [
    "Tech: Python, HTML, CSS",
    "Status: Deployed",
    "Link: http://chatroom.kato.cx/"
]
```

The `createProjectWindow` function includes a `linkifySpec` helper that:
1. Detects specs starting with "Link:"
2. Converts the URL portion into an HTML anchor tag
3. Sets `target="_blank"` to open links in a new tab

This maintains a consistent look while making URLs interactive and accessible. 

## Mobile Responsiveness

### Responsive Design System

The portfolio adapts to mobile devices through a comprehensive responsive design system:

1. **CSS Variables Adjustment**
```css
:root {
    --window-margin: 40px;  /* Desktop default */
    --spacing: 2rem;
}

@media (max-width: 768px) {
    :root {
        --window-margin: 10px;  /* Mobile adjustment */
        --spacing: 1rem;
    }
}
```

### Project Grid Layout
- Desktop: Multi-column grid using `auto-fit`
- Mobile: Single column layout for better readability
```css
.project-grid {
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
}

@media (max-width: 768px) {
    .project-grid {
        grid-template-columns: 1fr;
        gap: 1rem;
        padding: 0.5rem;
    }
}
```

### Collapsible Desktop Icons
The desktop icons adapt to mobile screens through a collapsible menu system:

1. **Toggle Button**
```html
<button class="menu-toggle" aria-label="Toggle menu">‚ãÆ</button>
```

2. **Mobile Styling**
```css
@media (max-width: 768px) {
    .desktop-icons {
        right: 5px;
        gap: 10px;
        transform: translateX(100%);  /* Hidden by default */
    }
    
    .desktop-icons.active {
        transform: translateX(0);     /* Shown when active */
    }
}
```

3. **JavaScript Toggle Functionality**
```javascript
const menuToggle = document.querySelector('.menu-toggle');
const desktopIcons = document.querySelector('.desktop-icons');

menuToggle.addEventListener('click', () => {
    desktopIcons.classList.toggle('active');
    menuToggle.textContent = desktopIcons.classList.contains('active') ? '√ó' : '‚ãÆ';
});
```

### Benefits
1. **Improved Mobile UX**
   - Reduced margins for better space utilization
   - Collapsible menu to prevent content overlap
   - Single column layout for easier reading

2. **Preserved Desktop Experience**
   - No changes to desktop layout
   - Smooth transitions between states
   - Consistent vintage Mac aesthetic

3. **Progressive Enhancement**
   - Base styles for all devices
   - Enhanced features for larger screens
   - Graceful degradation for older browsers

### Implementation Notes
- Breakpoint set at 768px for tablet/mobile transition
- Uses CSS transforms for smooth animations
- Maintains accessibility with ARIA labels
- Preserves all functionality across device sizes

================
File: index.html
================
<!DOCTYPE html>
<html lang="en" itemscope itemtype="http://schema.org/WebPage">
<head>
    <!-- Basic Meta Tags -->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=5.0">
    <title>Paul Han - Innovative Software & Hardware Engineer</title>

    <!-- SEO Optimization Section -->
    <!-- Basic SEO -->
    <meta name="description" content="Paul Han's Portfolio - Innovative Software & Hardware Engineer crafting elegant solutions. Explore projects in AI, machine learning, and creative problem-solving.">
    <meta name="keywords" content="software engineer, hardware engineer, full stack developer, creative problem solver, technical writing, system design, engineering solutions, AI, machine learning, portfolio">
    <meta name="author" content="Paul Junsuk Han">
    <meta name="robots" content="index, follow, max-image-preview:large">
    <meta name="theme-color" content="#f5e6d3">
    <meta name="google" content="nositelinkssearchbox">
    <meta name="google" content="notranslate">
    <meta name="format-detection" content="telephone=no">

    <!-- Favicon Section -->
    <link rel="apple-touch-icon" sizes="180x180" href="assets/site/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="assets/site/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="assets/site/favicon-16x16.png">
    <link rel="manifest" href="site.webmanifest">

    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website">
    <meta property="og:url" content="https://pauljunsukhan.com/">
    <meta property="og:title" content="Paul Han - Innovative SWE & HWE | Creative Problem Solver">
    <meta property="og:description" content="Discover innovative software & hardware engineering projects. From AI and machine learning to creative problem-solving, explore my journey in technology and engineering.">
    <meta property="og:image" content="https://pauljunsukhan.com/assets/site/social-preview.webp">
    <meta property="og:image:alt" content="https://pauljunsukhan.com/assets/site/social-preview.png">
    <meta property="og:image:type" content="image/webp">
    <meta property="og:site_name" content="Paul Han Portfolio">

    <!-- Twitter -->
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:url" content="https://pauljunsukhan.com/">
    <meta name="twitter:title" content="Paul Han - Innovative SWE & HWE | Creative Problem Solver">
    <meta name="twitter:description" content="Discover innovative software & hardware engineering projects. From AI and machine learning to creative problem-solving, explore my journey in technology and engineering.">
    <meta name="twitter:image" content="https://pauljunsukhan.com/assets/site/social-preview.webp">
    <meta name="twitter:image:alt" content="https://pauljunsukhan.com/assets/site/social-preview.png">
    <meta name="twitter:creator" content="@yourtwitterhandle">
    <meta name="twitter:site" content="@yourtwitterhandle">

    <!-- Canonical & Language -->
    <link rel="canonical" href="https://pauljunsukhan.com/">
    <link rel="alternate" hreflang="en" href="https://pauljunsukhan.com/">

    <!-- Styles -->
    <link rel="preload" href="styles/main.css" as="style" onload="this.onload=null;this.rel='stylesheet'">
    <noscript><link rel="stylesheet" href="styles/main.css"></noscript>
</head>
<body>
    <!-- Navigation -->
    <nav class="global-menu-bar" role="navigation" aria-label="Main navigation">
        <span class="apple-menu" aria-label="Menu icon">üçé</span>
        <div class="menu-divider" aria-hidden="true"></div>
        <span class="menu-item" role="menuitem">File</span>
        <span class="menu-item" role="menuitem">Edit</span>
        <span class="menu-item" role="menuitem">View</span>
        <span class="menu-item" role="menuitem">Special</span>
    </nav>

    <!-- Desktop Icons Navigation -->
    <button class="menu-toggle" aria-label="Toggle navigation menu" aria-expanded="false">‚ãÆ</button>
    <nav class="desktop-icons" role="navigation" aria-label="Quick navigation">
        <a href="/" class="desktop-icon" aria-label="Home">
            <div class="icon-image" aria-hidden="true">üíæ</div>
            <div class="icon-label">Home</div>
        </a>
        <a href="#projects" class="desktop-icon" aria-label="Projects">
            <div class="icon-image" aria-hidden="true">üìÅ</div>
            <div class="icon-label">Projects</div>
        </a>
        <a href="#about" class="desktop-icon" aria-label="Notes">
            <div class="icon-image" aria-hidden="true">üìù</div>
            <div class="icon-label">Notes</div>
        </a>
        <a href="#contact" class="desktop-icon" aria-label="Contact">
            <div class="icon-image" aria-hidden="true">‚úâÔ∏è</div>
            <div class="icon-label">Contact</div>
        </a>
    </nav>

    <!-- Main Content -->
    <main class="mac-window" role="main">
        <header class="window-title-bar" role="banner">
            <div class="window-controls" aria-label="Window controls">
                <div class="window-button" role="button" aria-label="Close"></div>
                <div class="window-button" role="button" aria-label="Minimize"></div>
                <div class="window-button" role="button" aria-label="Maximize"></div>
            </div>
            <div class="window-title">IE 8.0 and above</div>
        </header>

        <div class="content">
            <!-- Hero Section -->
            <section id="hero" aria-labelledby="hero-title">
                <div class="notebook-header">
                    <div class="header-left">
                        <time class="date" datetime="2024-01-02">Last Update: <span class="typewriter">01.03.2024</span></time>
                    </div>
                    <div class="header-right">
                        <img src="assets/site/headshot.png" alt="Paul Han - Software and Hardware Engineer" class="headshot" loading="lazy" width="180" height="180">
                    </div>
                </div>
                <h1 id="hero-title">Paul Junsuk Han</h1>
                <p class="subtitle">SWE, HWE, Designer, Writer, Neurotech, AI. Yale; ex Meta</p>
            </section>

            <section id="about" aria-labelledby="about-title">
                <div class="technical-sketch">
                    <h2 id="about-title">Field Notes</h2>
                    <div id="notes-content" class="notes-content">
                        <!-- Markdown content will be loaded here -->
                    </div>

                </div>
            </section>

            <section id="projects" aria-labelledby="projects-title">
                <h2 id="projects-title">Project Documentation</h2>
                <div class="project-grid dynamic-projects" role="list" aria-label="Project list" lang="en">
                    <!-- Projects will be loaded here from projects.json -->
                </div>

                <!-- Project Preview Window -->
                <div class="project-preview" aria-label="Project preview window">
                    <button class="exit-button" aria-label="Close preview">Exit</button>
                    <div class="preview-content">
                        <!-- Content will be loaded dynamically -->
                    </div>
                </div>
            </section>

            <section id="contact" aria-labelledby="contact-title">
                <h2 id="contact-title">Connect</h2>
                <div class="mac-window">
                    <div class="window-title-bar" role="heading" aria-level="3">
                        <div class="window-controls">
                            <div class="window-button" aria-hidden="true"></div>
                        </div>
                        <div class="window-title">Social Links</div>
                    </div>
                    <div class="content social-links">
                        <div class="social-grid" role="list" aria-label="Social media links">
                            <!-- Social links will be dynamically generated from config/socials.json -->
                        </div>
                    </div>
                </div>
            </section>

            <!-- Visitor Counter -->
            <div class="visitor-counter" aria-label="Site visitor counter">
                <div class="counter-display" role="status" aria-live="polite">
                    <div class="counter-digit" aria-hidden="true">0</div>
                    <div class="counter-digit" aria-hidden="true">0</div>
                    <div class="counter-digit" aria-hidden="true">0</div>
                    <div class="counter-digit" aria-hidden="true">0</div>
                    <div class="counter-digit" aria-hidden="true">0</div>
                    <div class="counter-digit" aria-hidden="true">0</div>
                </div>
                <img 
                    src="https://hits.seeyoufarm.com/api/count/incr/badge.svg?url=https%3A%2F%2Fpauljunsukhan.com&count_bg=%2379C83D&title_bg=%23555555&icon=&icon_color=%23E7E7E7&title=visits&edge_flat=false"
                    alt="Real-time visitor count for Paul Han's portfolio"
                    id="visitor-badge"
                    style="position: absolute; width: 1px; height: 1px; overflow: hidden;"
                    aria-hidden="true"
                >
            </div>
        </div>
    </main>

    <div class="overlay" aria-hidden="true"></div>

    <!-- Move all JSON-LD scripts here, outside the dynamic content area -->
    <script type="application/ld+json">
        {
            "@context": "https://schema.org",
            "@type": "Person",
            "name": "Paul Junsuk Han",
            "url": "https://pauljunsukhan.com",
            "image": "https://pauljunsukhan.com/assets/site/headshot.png",
            "sameAs": [
                "https://github.com/pauljunsukhan",
                "https://linkedin.com/in/[your-profile]"
            ],
            "jobTitle": ["Software Engineer", "Hardware Engineer"],
            "description": "SWE, HWE, Designer, Writer, Neurotech, AI",
            "knowsAbout": [
                "Software Engineering",
                "Hardware Engineering",
                "Concurrency Programming",
                "Electrical Engineering",
                "Creative Problem Solving",
                "Rationalism",
                "Progress Studies",
                "Full Stack Development",
                "AI/Machine Learning",
                "Founder"
            ],
            "alumniOf": [
                {
                    "@type": "CollegeOrUniversity",
                    "name": "Yale University",
                    "department": ["Computer Science", "Electrical Engineering"]
                }
            ],
            "hasCredential": [
                {
                    "@type": "EducationalOccupationalCredential",
                    "credentialCategory": "degree",
                    "name": "Bachelor of Science in Computer Science"
                },
                {
                    "@type": "EducationalOccupationalCredential",
                    "credentialCategory": "degree",
                    "name": "Bachelor of Science in Electrical Engineering"
                }
            ],
            "workLocation": {
                "@type": "Place",
                "address": {
                    "@type": "PostalAddress",
                    "addressLocality": "San Francisco",
                    "addressRegion": "CA",
                    "addressCountry": "US"
                }
            },
            "homeLocation": {
                "@type": "Place",
                "address": {
                    "@type": "PostalAddress",
                    "addressLocality": "San Francisco",
                    "addressRegion": "CA",
                    "addressCountry": "US"
                }
            },
            "workExample": [
                {
                    "@type": "TechArticle",
                    "name": "Neural Network Visualizer",
                    "url": "https://pauljunsukhan.com/projects/neural-network/",
                    "abstract": "Interactive visualization tool for neural network architectures using WebGL and React",
                    "proficiencyLevel": "Advanced",
                    "genre": "Software Engineering",
                    "datePublished": "2024-01-02",
                    "author": {
                        "@type": "Person",
                        "name": "Paul Junsuk Han"
                    },
                    "keywords": ["Neural Networks", "WebGL", "React", "Visualization", "Machine Learning"],
                    "technicalLevel": "Advanced"
                }
            ]
        }
    </script>
    <script type="application/ld+json">
        {
            "@context": "https://schema.org",
            "@type": "WebSite",
            "name": "Paul Han Portfolio",
            "url": "https://pauljunsukhan.com",
            "description": "Portfolio of Paul Han - Software & Hardware Engineer",
            "potentialAction": {
                "@type": "SearchAction",
                "target": "https://pauljunsukhan.com/search?q={search_term_string}",
                "query-input": "required name=search_term_string"
            }
        }
    </script>
    <script type="application/ld+json">
        {
            "@context": "https://schema.org",
            "@type": "BreadcrumbList",
            "itemListElement": [{
                "@type": "ListItem",
                "position": 1,
                "name": "Home",
                "item": "https://pauljunsukhan.com"
            }]
        }
    </script>

    <!-- Add marked.js before main.js -->
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
    <script src="js/main.js" defer></script>
</body>
</html>

================
File: README.md
================
# Personal Portfolio Website

A modern, SEO-friendly portfolio website built with vanilla HTML, CSS, and JavaScript.

## Features

- Responsive design
- SEO optimized
- Fast loading with minimal JavaScript
- Support for images, text, code blocks, and video
- Lazy loading for images
- Smooth scrolling navigation

## Local Development

To run the website locally:

1. Clone this repository
2. Open the project directory
3. Start a local server:

```bash
# Using Python 3
python3 -m http.server 8000

# Or using Node.js
npx serve
```

4. Visit `http://localhost:8000` in your browser

## Deployment

To deploy to your VPS:

1. Ensure your VPS has a web server installed (nginx recommended)
2. Set up SSL using Let's Encrypt
3. Configure your domain to point to your VPS
4. Upload the files to your web server

### Basic nginx Configuration

```nginx
server {
    listen 80;
    server_name yourdomain.com www.yourdomain.com;
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl;
    server_name yourdomain.com www.yourdomain.com;

    ssl_certificate /etc/letsencrypt/live/yourdomain.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/yourdomain.com/privkey.pem;

    root /var/www/portfolio;
    index index.html;

    location / {
        try_files $uri $uri/ =404;
    }
}
```

## Customization

1. Modify `index.html` to add your content
2. Update styles in `styles/main.css`
3. Add custom JavaScript in `js/main.js`
4. Place your images and media in the `assets/` directory

## Performance Optimization

- Images should be optimized before uploading
- Use modern image formats (WebP) with fallbacks
- Minimize external dependencies
- Use lazy loading for images and videos

================
File: robots.txt
================
User-agent: *
Allow: /
Disallow: /config/
Disallow: /assets/private/

# Allow search engines to crawl JavaScript and CSS files
Allow: /*.js$
Allow: /*.css$

# Prevent crawling of search results, if any
Disallow: /*?*

# Sitemap location
Sitemap: https://pauljunsukhan.com/sitemap.xml

# Crawl-delay for all bots
Crawl-delay: 10

================
File: seo.md
================
# SEO Strategy for pauljunsukhan.com

## Current Implementation

### Head Organization
The `<head>` section is organized into clear, commented sections:
- Basic Meta Tags
- SEO Optimization Section
- Favicon Section
- Open Graph / Facebook
- Twitter Cards
- Canonical & Language
- Styles

### Meta Tags & Structure
- ‚úÖ Essential meta tags (description, viewport, keywords)
- ‚úÖ Open Graph and Twitter Card integration
- ‚úÖ Proper semantic HTML structure
- ‚úÖ Schema.org JSON-LD implementation (Person, WebSite, BreadcrumbList)
- ‚úÖ Favicon optimization (16px, 32px, 180px)
- ‚úÖ Canonical URL and language specification
- ‚úÖ Robots meta tag with max-image-preview
- ‚úÖ Theme color for mobile browsers
- ‚úÖ Google-specific tags (nositelinkssearchbox, notranslate)
- ‚úÖ Format detection for telephone numbers

### Structured Data Implementation
Currently implementing three types of structured data:
1. Person Schema
   - Basic information
   - Work examples
   - Skills and knowledge areas
   - Educational background
   - Professional roles

2. WebSite Schema
   - Site information
   - Search functionality
   - Basic metadata

3. BreadcrumbList Schema
   - Navigation structure
   - Page hierarchy

### Accessibility Features
- ‚úÖ ARIA labels for all interactive elements
- ‚úÖ Role attributes for semantic sections
- ‚úÖ Proper heading hierarchy (h1, h2, h3)
- ‚úÖ Alt text for images
- ‚úÖ Aria-hidden for decorative elements
- ‚úÖ Proper time element usage with datetime attributes

### Performance Optimization
- ‚úÖ CSS preloading
- ‚úÖ Lazy loading for images
- ‚úÖ Image dimension specifications
- ‚úÖ WebP image format with PNG fallback
- ‚úÖ Minimal inline styles

## SEO Maintenance Checklist

### Regular Updates Needed
1. [ ] Update structured data when adding new projects
2. [ ] Refresh last modified dates
3. [ ] Update social media handles in meta tags
4. [ ] Review and update keywords based on new content
5. [ ] Check and update all external links

### Schema.org Structure
Keep structured data organized in this order:
1. Person (main entity)
2. WebSite (site information)
3. BreadcrumbList (navigation)
4. Additional schemas as needed

### Meta Tag Maintenance
Key areas to keep updated:
- Description (155-160 characters)
- Keywords (based on current focus)
- OG/Twitter images (1200x630px)
- Social media URLs
- Last modified dates

### File Organization
Current critical SEO files:
- index.html (main SEO implementation)
- robots.txt (crawler instructions)
- sitemap.xml (site structure)
- site.webmanifest (PWA support)

## Notes for Future Updates
1. Consider adding:
   - More structured data types for projects
   - Article schema for blog posts
   - Organization schema
   - FAQ schema for common questions
2. Implement:
   - JSON-LD for project previews
   - Rich snippets for project status
   - Event tracking schema
3. Monitor:
   - Schema validation
   - Meta tag effectiveness
   - Social media preview rendering

================
File: site.webmanifest
================
{
    "name": "Paul Han Portfolio",
    "short_name": "Paul Han",
    "description": "Portfolio showcasing software engineering, hardware engineering, design work, and writing projects.",
    "start_url": "/",
    "display": "standalone",
    "background_color": "#f5e6d3",
    "theme_color": "#f5e6d3",
    "icons": [
        {
            "src": "assets/site/favicon-16x16.png",
            "sizes": "16x16",
            "type": "image/png"
        },
        {
            "src": "assets/site/favicon-32x32.png",
            "sizes": "32x32",
            "type": "image/png"
        },
        {
            "src": "assets/site/apple-touch-icon.png",
            "sizes": "180x180",
            "type": "image/png"
        }
    ]
}

================
File: sitemap.xml
================
<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9"
        xmlns:image="http://www.google.com/schemas/sitemap-image/1.1">
    <url>
        <loc>https://pauljunsukhan.com/</loc>
        <lastmod>2024-01-02</lastmod>
        <changefreq>weekly</changefreq>
        <priority>1.0</priority>
        <image:image>
            <image:loc>https://pauljunsukhan.com/assets/site/social-preview.webp</image:loc>
            <image:title>Paul Han - Portfolio</image:title>
        </image:image>
    </url>
    <url>
        <loc>https://pauljunsukhan.com/projects/neural-network/</loc>
        <lastmod>2024-01-02</lastmod>
        <changefreq>monthly</changefreq>
        <priority>0.8</priority>
    </url>
    <url>
        <loc>https://pauljunsukhan.com/projects/portfolio-website/</loc>
        <lastmod>2024-01-02</lastmod>
        <changefreq>monthly</changefreq>
        <priority>0.8</priority>
    </url>
</urlset>

================
File: TODO.md
================
# TODO: Combine the Entire Site into One PDF

Below is a suggested approach for gathering all pages from your site into a single PDF document. This involves generating a combined HTML (containing the content of each page) and then converting that HTML into a PDF.

---

## 1. List Your Pages
Create an array of URLs that represent every page of your site you want to include:

‚Ä¢ Home page (e.g., https://yoursite.com/)  
‚Ä¢ Project pages (e.g., https://yoursite.com/projects/neural-network/)  
‚Ä¢ Any extra or hidden pages

---

## 2. Write a Node Script to Fetch and Concatenate HTML
Use Node.js to fetch each page‚Äôs HTML, strip out redundant headers/footers, and combine them into one large HTML file (combined.html).

Example (no line numbers):
javascript
const fetch = require('node-fetch');
const fs = require('fs');
async function combinePages(urls) {
let combinedContent = '<!DOCTYPE html><html><head><meta charset="UTF-8"><title>All Pages</title></head><body>';
for (const url of urls) {
try {
const response = await fetch(url);
if (!response.ok) {
console.error(Failed to fetch ${url});
continue;
}
const text = await response.text();
// Optionally strip out <head> or repeated nav/footers
// Then append textual or <main> content to combinedContent
combinedContent += <section style="page-break-after: always;">${text}</section>;
} catch (err) {
console.error(Error loading ${url}: ${err.message});
}
}
combinedContent += '</body></html>';
fs.writeFileSync('combined.html', combinedContent, 'utf8');
console.log('Generated combined.html');
}
combinePages([
'https://yoursite.com/',
'https://yoursite.com/projects/neural-network/',
'https://yoursite.com/projects/quantum-circuit/',
// Add more pages as needed
]);


When you run this script (for example node combine.js), you get combined.html that contains all pages back-to-back.  

---

## 3. Convert the Combined HTML to PDF
Use a tool like wkhtmltopdf or a Node library like Puppeteer:

‚Ä¢ wkhtmltopdf approach (command-line):  
  ¬ª wkhtmltopdf combined.html combined.pdf  

‚Ä¢ Puppeteer approach (programmatic in Node):
avascript
const puppeteer = require('puppeteer');
const fs = require('fs');
(async () => {
const browser = await puppeteer.launch();
const page = await browser.newPage();
// Load our local combined.html file
const htmlFilePath = file://${__dirname}/combined.html;
await page.goto(htmlFilePath, { waitUntil: 'networkidle0' });
await page.pdf({
path: 'combined.pdf',
format: 'A4',
printBackground: true,
});
await browser.close();
console.log('combined.pdf generated!');
})();


In either case, you end up with a single PDF containing all your site‚Äôs pages.

---

## 4. (Optional) Apply Custom Styles for Print
You can create a dedicated print stylesheet (print.css) if you want:
css
@media print {
body {
font-family: sans-serif;
}
nav, footer, .header, .social-links {
display: none; / Hide extraneous elements /
}
section {
page-break-after: always;
}
}

Ensure you reference this stylesheet in combined.html (or inline in your original pages) so that the final PDF looks neat.

---

## 5. Final Check
1. Confirm that combined.html is generated without errors.  
2. Verify each page‚Äôs content is present in the PDF.  
3. Adjust layout (page size, margins, etc.) for a clean, readable final document.

Once complete, you have a single PDF containing all pages of your site, perfect for archival, offline reading, or printing.  



---

## 2. Generate Each Project Page from Markdown with Front Matter

You can also compile each project‚Äôs page from Markdown files (with front matter) to HTML, then integrate this output into your existing static site structure. The process goes like this:

1. Write Markdown Files with Front Matter

Create a directory (e.g., /content/projects) and store files with YAML front matter at the top, followed by the project‚Äôs Markdown. For example:


markdown
---
title: Neural Network Visualizer
id: neural-network
subtitle: RESEARCH & DEVELOPMENT
description: >
Interactive visualization tool for neural network architectures. Built with WebGL and React.
specs:
Tech: WebGL, React, TypeScript
Status: Production
Role: Lead Developer
buttons:
preview: "/projects/neural-network"
link: "/projects/neural-network"
github: "https://github.com/pauljunsukhan/neural-network"
---
Introduction
This project focuses on visualizing neural networks in real time...



2. Parse and Convert to HTML

Use a Node script that:  
‚Ä¢ Reads each Markdown file.  
‚Ä¢ Extracts front matter (YAML) via a library (e.g. gray-matter).  
‚Ä¢ Converts the Markdown body to HTML (e.g. using marked or markdown-it).  

Example (without line numbers):
javascript
const fs = require('fs');
const path = require('path');
const matter = require('gray-matter'); // npm install gray-matter
const { marked } = require('marked'); // or another markdown library
function compileProjectMarkdown(mdPath) {
const rawContent = fs.readFileSync(mdPath, 'utf8');
const parsed = matter(rawContent); // parsed.data (front matter), parsed.content (MD)
const frontMatter = parsed.data;
const htmlBody = marked(parsed.content);
return { frontMatter, htmlBody };
}
// Example usage
const dir = path.join(dirname, 'content', 'projects');
const files = fs.readdirSync(dir).filter(file => file.endsWith('.md'));
files.forEach(file => {
const filePath = path.join(dir, file);
const { frontMatter, htmlBody } = compileProjectMarkdown(filePath);
// Insert it into your existing HTML "template"
const resultHtml = <main class="mac-window"> <div class="window-title-bar"> <div class="window-controls"> <div class="window-button maximize-button"></div> </div> <div class="window-title">${frontMatter.title}</div> <a href="${frontMatter.buttons.github}" class="project-link-button">Github</a> </div> <div class="content"> <h3>${frontMatter.subtitle}</h3> ${htmlBody} </div> </main> ;
// Now write the resultHtml to a static file in /projects/${frontMatter.id}/index.html
const outDir = path.join(dirname, 'projects', frontMatter.id);
fs.mkdirSync(outDir, { recursive: true });
fs.writeFileSync(path.join(outDir, 'index.html'), resultHtml, 'utf8');
});


3. Use the Generated Static HTML in Your Site

After running the script, you‚Äôll have a compiled index.html for each project. Your existing code for the preview window, overlay, etc. will work as is‚Äîbecause each project folder now contains a fully formed index.html matching your site‚Äôs structure.

4. Adapt Your Existing Workflows

‚Ä¢ You can integrate this into your build process or a simple pre-deploy step.  
‚Ä¢ If needed, you can also generate the JSON used in /config/projects.json from the front matter‚Äîensuring you have a single source of truth for each project‚Äôs data.

By following these steps, you can maintain each project‚Äôs content in Markdown (with front matter), then compile to HTML and seamlessly integrate the results into your static site. This lets you keep your writing workflow in Markdown while preserving your existing HTML styling and JavaScript functionality.

## 6. Optimization Section

Below are some additional ideas for honing your current site and build approach:

1. Consolidate or Remove Unnecessary Preloads  
   Remove or properly handle any ‚Äúpreload‚Äù link references that might cause multiple CSS downloads. For performance, you can use the common ‚Äúonload‚Äù trick:
   ```html
   <link
     rel="preload"
     href="styles/main.css"
     as="style"
     onload="this.onload=null;this.rel='stylesheet'"
   >
   <noscript>
     <link rel="stylesheet" href="styles/main.css">
   </noscript>
   ```
   Or just rely on a single standard stylesheet link.

2. Accessibility and Viewport  
   Consider omitting ‚Äúmaximum-scale=1.0‚Äù in your viewport meta, allowing users to zoom on mobile devices for better accessibility:
   ```html
   <meta name="viewport" content="width=device-width, initial-scale=1.0">
   ```

3. Minify and Bundle  
   Minify your JavaScript files (and CSS if needed) as part of your build or pre-deploy step. This can reduce load times, especially if the site grows.

4. Check DOM Queries and Elements  
   If you have references to a ‚ÄúcontactForm‚Äù or other selectors that do not exist in certain pages, guard them appropriately or remove unused code. This helps avoid potential console errors and keeps your code lean.

5. Printer-Ready CSS Enhancements  
   If you anticipate printing or PDF exports, consider a dedicated @media print stylesheet. Hide unneeded items like nav menus and large visuals, ensuring a clean print design.

6. Local Caches and CDNs  
   Use local caching or a CDN for static files (images, CSS, JS). This can help with load times and reliability.

These optimization ideas can be gradually integrated into your current workflow, ensuring a balanced approach to performance, user-experience, and ease of maintenance.

index.html...
2. Repeated ‚ÄúGlobal Menu Bar‚Äù & Desktop Icons
The same ‚Äúglobal-menu-bar‚Äù and ‚Äúdesktop-icons‚Äù sections appear on other pages (like under ‚Äúconstruction‚Äù or ‚Äúneural-network‚Äù). As your site grows, consider turning these repeated snippets into partial includes, a templating system, or an importable component. This keeps things DRY (Don‚Äôt Repeat Yourself) and makes updates easier in one central place.


8. Code Repetition / Templating
You might notice the same structure (DOCTYPE, <html>, <head>, etc.) replicated in multiple HTML files. A static-site generator (e.g., Eleventy, Astro, or even your own build scripts) can help unify repeated elements (header, footer, menu) and reduce duplication. This leads to:
Easier maintenance (change once, update everywhere).
Clear separation of layout vs. content.


Additional SEO Tasks:
Create a sitemap.xml file
Create a robots.txt file
Set up Google Search Console
Implement breadcrumbs navigation
Consider adding a blog section for content SEO
Optimize image file names and add more descriptive alt text
