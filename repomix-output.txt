This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-01-23T06:58:51.287Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
config/
  projects.json
  socials.json
desktop/
  infra/
    under-construction/
      index.html
scripts/
  encode_personaldata.js
  globals.js
  projects.js
  socials.js
styles/
  construction.css
  desktop.css
  global.css
  projects.css
  socials.css
.cursorignore
block_editor.html
CNAME
index.html
README.md
robots.txt
site.webmanifest

================================================================
Files
================================================================

================
File: config/projects.json
================
{
    "projects": [
      {
        "id": "neural-network",
        "title": "LLM et. all work",
        "subtitle": "ML Study",
        "description": "Various ML projects for education",
        "specs": [
          "Tech: Python, PyTorch, TensorFlow, CUDA",
          "Status: Active Development",
          "Importance: Core Research"
        ],
        "defaultMinimized": false,
        "buttons": {
          "preview": "/desktop/infra/neural-network",
          "link": "/desktop/infra/neural-network",
          "github": "https://github.com/pauljunsukhan/neural-network",
          "githubText": "Github"
        }
      },
      {
        "id": "silent-speech",
        "title": "Silent Speech",
        "subtitle": "Silent Speech Interfaces",
        "description": "Developing silent speech interfaces for AI-Human interfaces",
        "specs": [
          "Tech: Signal Processing, ML, Hardware",
          "Status: Research Phase",
          "Importance: Future Interface"
        ],
        "defaultMinimized": false,
        "buttons": {
          "preview": "/desktop/infra/under-construction",
          "link": "/desktop/infra/under-construction",
          "github": "https://github.com/pauljunsukhan/throatmicdata",
          "githubText": "Github"
        }
      },
      {
        "id": "software-et-all",
        "title": "General Software Projects",
        "subtitle": "Learning coding and building useful things",
        "description": "Chatroom, web apps, utilities, tools of the trade",
        "specs": [
          "Tech: Python, HTML, CSS, JavaScript, Heroku",
          "Status: Always useful",
          "Link: http://chatroom.kato.cx Label: Check out the chatroom"
        ],
        "defaultMinimized": true,
        "buttons": {
          "preview": "/desktop/infra/under-construction",
          "link": "/desktop/infra/under-construction",
          "github": "https://github.com/pauljunsukhan/chatroomkatocx",
          "githubText": "Github"
        }
      },
      {
        "id": "llm-verb-originality-benchmark",
        "title": "Benchmarking LLMs",
        "subtitle": "Ranked written report on LLM verbal originality.",
        "description": "I will collaborate with your LLM for one hour on an original verbal topic and create a 500 word ranked written report.",
        "specs": [
          "Price: $175"
        ],
        "buttons": {
          "preview": "/desktop/infra/under-construction",
          "link": "/desktop/infra/under-construction",
          "github": "https://github.com/pauljunsukhan/chatroomkatocx",
          "githubText": "Github"
        }
      },
      {
        "id": "electronics-et-all",
        "title": "General EE Projects",
        "subtitle": "PCB, micros, systems, wearables, being an EE",
        "description": "What all EEs need to know",
        "specs": [
          "Tech: KiCad, Altium, OrCAD, Art of Electronics, ESP32, Arduino, TTL",
          "Status: How I make a living (right now)",
          "Newest thing: wearable ESP32 PCB for sports"
        ],
        "buttons": {
          "preview": "/desktop/infra/under-construction",
          "link": "/desktop/infra/under-construction",
          "github": "https://github.com/pauljunsukhan/portfolio",
          "githubText": "Github"
        }
      },
      {
        "id": "3d-printing",
        "title": "3D Printing",
        "subtitle": "3D Printing & CAD",
        "description": "Various 3D prints + CAD/3DP education. I like industrial design & useful utility for projects.",
        "specs": [
          "Tech: Bambu, FDM, PC/PA, Onshape, Design",
          "Status: Semi-cracked after a summer",
          "Role: Designer & Developer"
        ],
        "buttons": {
          "preview": "/desktop/infra/under-construction",
          "link": "/desktop/infra/under-construction",
          "github": "https://github.com/pauljunsukhan/portfolio",
          "githubText": "Github"
        }
      },
      {
        "id": "tesla-coils",
        "title": "High Voltage",
        "subtitle": "Tesla Coils, Plasma Speakers, HV",
        "description": "High voltage power electronics that make sparks, music, and melted metal.",
        "specs": [
          "Tech: SSTC, DRSSTC, VTTC, ZVS, HV",
          "Status: Not active",
          "Importance: Foundational EE knowledge"
        ],
        "buttons": {
          "preview": "/desktop/infra/under-construction",
          "link": "/desktop/infra/under-construction",
          "github": "https://github.com/pauljunsukhan/portfolio",
          "githubText": "Github"
        }
      },
      {
        "id": "power-electronics",
        "title": "Power Electronics, Big Silicon, & Wireless Charging",
        "subtitle": "Induction heating, wireless energy transfer, DC/DC converters",
        "description": "High power electronics & power electronics",
        "specs": [
          "Tech: H-bridge, PWM, Buck/Boost, Induction heating, Wireless charging",
          "Status: Old",
          "Importance: Foundational EE knowledge"
        ],
        "buttons": {
          "preview": "/desktop/infra/under-construction",
          "link": "/desktop/infra/under-construction",
          "github": "https://github.com/pauljunsukhan/portfolio",
          "githubText": "Github"
        }
      },
      {
        "id": "audio-electronics",
        "title": "Audio, cassette, radios",
        "subtitle": "Audio electronics, vacuum tubes, radios, cassette decks",
        "description": "Childhood hobby that got me started",
        "specs": [
          "Tech: Old old stuff",
          "Status: Historical",
          "Importance: Foundational EE knowledge"
        ],
        "buttons": {
          "preview": "/desktop/infra/under-construction",
          "link": "/desktop/infra/under-construction",
          "github": "https://github.com/pauljunsukhan/portfolio",
          "githubText": "Github"
        }
      },
      {
        "id": "ai-guardian",
        "title": "AI Guardian",
        "subtitle": "AI-Human Intelligence Augmentation",
        "description": "Exploratory notes on AI-Human intelligence augmentation. tFUS/BCI/neurotech. Silent speech interfaces.",
        "specs": [
          "Tech: Pen and paper",
          "Status: Cooking",
          "Importance: Long term"
        ],
        "buttons": {
          "preview": "/desktop/infra/under-construction",
          "link": "/desktop/infra/under-construction"
        }
      }
    ]
  }

================
File: config/socials.json
================
{
    "email": {
        "icon": "‚úâ",
        "label": "Email",
        "value": "aW8ucGF1bEBrYXRvLmN4",
        "type": "dialog",
        "encrypt": true
    },
    "messaging": {
        "icon": "üí¨",
        "label": "Messaging",
        "value": "ODYwLTcwOS04MzY4",
        "dialogContent": "Text, Signal, Telegram, Teletype",
        "type": "dialog",
        "encrypt": true
    },
    "discord": {
        "icon": "üéÆ",
        "label": "Discord",
        "value": "@velvetundergroundandy",
        "type": "dialog",
        "encrypt": false
    },
    "twitter": {
        "icon": "ùïè",
        "label": "Twitter",
        "url": "https://twitter.com/pauljunsukhan",
        "type": "link"
    },
    "github": {
        "icon": "‚å®",
        "label": "GitHub",
        "url": "https://github.com/pauljunsukhan",
        "type": "link"
    },
    "huggingface": {
        "icon": "ü§ó",
        "label": "HuggingFace",
        "url": "https://huggingface.co/pauljunsukhan",
        "type": "link"
    },
    "linkedin": {
        "icon": "üíº",
        "label": "LinkedIn",
        "url": "https://www.linkedin.com/in/pauljunsukhan",
        "type": "link"
    },
    "substack": {
        "icon": "üìù",
        "label": "Substack",
        "url": "https://pauljunsukhanwrites.substack.com",
        "type": "link"
    },
    "resume_sw": {
        "icon": "üìÑ",
        "label": "Resume (SW)",
        "url": "./assets/docs/Han_Paul Resume_SW.pdf",
        "type": "link"
    },
    "resume_hw": {
        "icon": "üìã",
        "label": "Resume (HW)",
        "url": "./assets/docs/Han_Paul Resume.pdf",
        "type": "link"
    }
}

================
File: desktop/infra/under-construction/index.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="Under Construction - Classic 90s style project page with modern Mac aesthetics">
    <title>Under Construction | Paul Junsuk Han</title>
    <link rel="stylesheet" href="/styles/global.css">
    <link rel="stylesheet" href="/styles/construction.css">
</head>
<body>
    <!-- Add mobile menu toggle button -->
    <button class="menu-toggle">‚ãÆ</button>

    <!-- Classic Mac Menu Bar -->
    <div class="global-menu-bar">
        <span class="apple-menu">üçé</span>
        <div class="menu-divider"></div>
        <span class="menu-item">File</span>
        <span class="menu-item">Edit</span>
        <span class="menu-item">View</span>
        <span class="menu-item">Special</span>
    </div>

    <!-- Desktop Icons -->
    <div class="desktop-icons">
        <a href="/" class="desktop-icon">
            <div class="icon-image">üíæ</div>
            <div class="icon-label">Home</div>
        </a>
        <a href="/#projects" class="desktop-icon">
            <div class="icon-image">üìÅ</div>
            <div class="icon-label">Projects</div>
        </a>
        <a href="/#about" class="desktop-icon">
            <div class="icon-image">üìù</div>
            <div class="icon-label">Notes</div>
        </a>
        <a href="/#contact" class="desktop-icon">
            <div class="icon-image">‚úâÔ∏è</div>
            <div class="icon-label">Contact</div>
        </a>
    </div>

    <!-- Main Project Window -->
    <main class="mac-window">
        <div class="window-title-bar">
            <div class="window-controls">
                <div class="window-button"></div>
                <div class="window-button"></div>
                <div class="window-button"></div>
            </div>
            <div class="window-title">Project Under Construction</div>
            <a href="https://github.com/pauljunsukhan/portfolio" class="window-link" target="_blank">Github</a>
        </div>
        <div class="content">
            <div class="construction-wrapper">
                <div class="construction-sign">
                    <div class="construction-header">
                        <span class="barrier">üöß</span>
                        <span class="title">UNDER CONSTRUCTION</span>
                        <span class="barrier">üöß</span>
                    </div>
                    
                    <div class="construction-divider">- - - - - - - - - - - - - - - - -</div>
                    
                    <div class="construction-info">
                        <p>This project is currently in development.<br>Please check back soon!</p>
                    </div>
                    
                    <div class="construction-divider">- - - - - - - - - - - - - - - - -</div>
                    
                    <div class="webring-box">
                        <p>üë∑ Want more sites like this? Visit the <a href="http://amasci.com/weird.html" target="_blank">Webring</a>! ‚ú®</p>
                    </div>
                    
                    <div class="construction-divider">- - - - - - - - - - - - - - - - -</div>
                    
                    <div class="update-info">
                        Last Updated: <span class="date-underline">SEPTEMBER 1993</span>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <script type="module" src="/scripts/global.js"></script>
</body>
</html>

================
File: scripts/encode_personaldata.js
================
const fs = require('fs');
const path = require('path');

// Read the original config
const configPath = path.join(__dirname, '../config/socials.json');
const config = JSON.parse(fs.readFileSync(configPath, 'utf8'));

// Process each social entry
Object.entries(config).forEach(([key, social]) => {
    if (social.type === 'dialog' && social.encrypt) {
        // Base64 encode the value
        social.value = Buffer.from(social.value).toString('base64');
    }
});

// Write the processed config
fs.writeFileSync(configPath, JSON.stringify(config, null, 4));

================
File: scripts/globals.js
================
/**
 * globals.js
 * ----------------------------------
 * Site-wide features & placeholders for possible compilation steps.
 */


/////////////////////////////
// 1) Linkify Text  //
/////////////////////////////
/**
 * linkifyText & auto-linkify
 * -------------------------
 * These functions provide automatic link generation from text.
 * 
 * Usage:
 * 1. Add the 'auto-linkify' class to any element containing text you want to process:
 *    <div class="auto-linkify">
 *      Link: https://example.com Label: My Example Site
 *    </div>
 * 
 * 2. The text should follow this format:
 *    "Link: URL Label: Link Text"
 *    - If Label is omitted, the URL will be used as the link text
 *    - Example: "Link: https://github.com Label: View on GitHub"
 *    - Example: "Link: https://github.com" (URL will be the link text)
 * 
 * 3. The result will be an anchor tag:
 *    <a href="URL" target="_blank" rel="noopener noreferrer">Link Text</a>
 * 
 * Note: initAutoLinkify() is called automatically on DOMContentLoaded,
 * so you don't need to call it manually unless you're adding content dynamically.
 */
export function linkifyText(text) {
  // Capture groups:
  // 1) The portion after "Link:" up to "Label:" or end-of-string
  // 2) The portion after "Label:" if present
  // This regex is flexible if there's spacing changes.
  const linkRegex = /Link:\s*(\S+)(?:\s+Label:\s*(.+))?/gi;

  return text.replace(linkRegex, (match, url, label) => {
    // If no label is provided, use the URL itself as the link text
    const displayText = label || url;
    // You could further sanitize or validate URL if needed
    return `<a href="${url}" target="_blank" rel="noopener noreferrer">${displayText}</a>`;
  });
}

/**
 * Automatically linkify elements with the 'auto-linkify' class
 */
export function initAutoLinkify() {
  const elements = document.querySelectorAll('.auto-linkify');
  elements.forEach(element => {
    element.innerHTML = linkifyText(element.innerHTML);
  });
}

//////////////////////
// 2) SMOOTH SCROLL //
//////////////////////
document.querySelectorAll('a[href^="#"]').forEach(anchor => {
    anchor.addEventListener('click', (e) => {
      e.preventDefault();
      const target = document.querySelector(anchor.getAttribute('href'));
      if (target) {
        target.scrollIntoView({ behavior: 'smooth', block: 'start' });
      }
    });
  });

/////////////////////////
// 3) LAZY-LOADING IMG //
/////////////////////////
  document.addEventListener('DOMContentLoaded', () => {
    const lazyImages = document.querySelectorAll('img[data-src]');
  
    const imageObserver = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const img = entry.target;
          img.src = img.dataset.src;
          img.removeAttribute('data-src');
          imageObserver.unobserve(img);
        }
      });
    });
  
    lazyImages.forEach(img => imageObserver.observe(img));
  });
  
////////////////////////
// 4) CONTACT FORM    //
////////////////////////
  const contactForm = document.querySelector('.contact-form form');
  if (contactForm) {
    contactForm.addEventListener('submit', (e) => {
      e.preventDefault();
      console.log('Form submitted (placeholder)');
      // Potentially AJAX or fetch call here
    });
  }
  
////////////////////////////////////
// 5) DIALOG BOX //
////////////////////////////////////
/**
 * Safely decode Base64, returning the original string if decoding fails.
 */
function decodeBase64(str) {
  try {
    return atob(str);
  } catch (e) {
    console.error('Failed to decode base64:', e);
    return str; // Fallback to returning the raw string
  }
}

/**
 * createDialog
 * -----------
 * Dynamically creates and shows a Mac OS-style dialog box with an overlay.
 *
 * Features:
 *  - Overlay reuse (only one <div id="overlay"> at a time)
 *  - ESC, overlay-click, and close button to dismiss
 *  - Selective Base64 decoding for protected content
 *  - Focus trapping
 *  - Cleanup on close (removes body class, the dialog, and the overlay if no more dialogs)
 *
 * Usage:
 *
 *   // Basic error dialog
 *   createDialog({
 *     title: 'Preview Error',
 *     content: 'This project preview is not available yet.',
 *     onClose: () => { console.log('Dialog closed'); }
 *   });
 *
 *   // Dialog with partial encrypted content
 *   createDialog({
 *     title: 'Contact Info',
 *     content: `
 *       <p>You can reach me via:</p>
 *       <p class="protected-content">aW8ucGF1bEBrYXRvLmN4</p>
 *     `,
 *     isEncoded: true,
 *     onClose: () => { console.log('Dialog closed'); }
 *   });
 *
 *   // Default error dialog
 *   showError(); // displays "Error" with "Oops! Something went wrong"
 */
export function createDialog({
  title = 'Error',
  content = 'Oops! Something went wrong.',
  isEncoded = false,
  onClose = null
} = {}) {
  // 1) Create temporary div to parse content
  const tempDiv = document.createElement('div');
  tempDiv.innerHTML = content;
  
  // 2) Find and decode any protected content
  if (isEncoded) {
    tempDiv.querySelectorAll('.protected-content').forEach(el => {
      el.textContent = decodeBase64(el.textContent.trim());
    });
  }
  
  const finalContent = tempDiv.innerHTML;

  // 3) Create the dialog
  const dialog = document.createElement('div');
  dialog.classList.add('mac-dialog');

  // Title bar
  const titleBar = document.createElement('div');
  titleBar.classList.add('window-title-bar');

  // Window controls (close button)
  const windowControls = document.createElement('div');
  windowControls.classList.add('window-controls');

  const closeButton = document.createElement('div');
  closeButton.classList.add('window-button', 'close-button');
  windowControls.appendChild(closeButton);

  const windowTitle = document.createElement('div');
  windowTitle.classList.add('window-title');
  windowTitle.textContent = title;

  titleBar.appendChild(windowControls);
  titleBar.appendChild(windowTitle);

  // Content area
  const contentDiv = document.createElement('div');
  contentDiv.classList.add('content');
  contentDiv.innerHTML = finalContent;

  dialog.appendChild(titleBar);
  dialog.appendChild(contentDiv);

  // 4) Re-use or create an overlay
  let overlay = document.getElementById('overlay');
  if (!overlay) {
    overlay = document.createElement('div');
    overlay.id = 'overlay';
    overlay.style.position = 'fixed';
    overlay.style.top = 0;
    overlay.style.left = 0;
    overlay.style.width = '100vw';
    overlay.style.height = '100vh';
    overlay.style.background = 'rgba(0, 0, 0, 0.5)';
    overlay.style.zIndex = '1999';
    overlay.style.opacity = '0';
    overlay.style.visibility = 'hidden';
    overlay.style.transition = 'opacity 0.2s ease';
    document.body.appendChild(overlay);
  }

  // 5) Insert dialog & show it
  document.body.appendChild(dialog);
  document.body.classList.add('dialog-open');

  requestAnimationFrame(() => {
    dialog.classList.add('active');
    dialog.style.zIndex = '2000';
    dialog.style.opacity = '1';
    dialog.style.visibility = 'visible';
    overlay.style.opacity = '1';
    overlay.style.visibility = 'visible';
    // For accessibility/focus
    closeButton.focus();
  });

  /**
   * closeDialog
   * Removes dialog from DOM, hides overlay (if no more dialogs), calls onClose.
   */
  function closeDialog() {
    dialog.classList.remove('active');
    dialog.style.opacity = '0';
    dialog.style.visibility = 'hidden';
    overlay.style.opacity = '0';
    overlay.style.visibility = 'hidden';
    document.body.classList.remove('dialog-open');

    // Remove global ESC listener
    document.removeEventListener('keydown', handleGlobalEsc);

    // Remove after CSS transition
    setTimeout(() => {
      if (dialog.parentNode) {
        dialog.parentNode.removeChild(dialog);
      }
      // If no more active dialogs exist, remove overlay
      if (!document.querySelector('.mac-dialog.active')) {
        if (overlay.parentNode) overlay.parentNode.removeChild(overlay);
      }
      if (typeof onClose === 'function') {
        onClose();
      }
    }, 300);
  }

  // Close button => close
  closeButton.addEventListener('click', closeDialog);

  // Overlay click => close
  overlay.addEventListener('click', (e) => {
    if (e.target === overlay) {
      closeDialog();
    }
  });

  // Focus trap for TAB
  dialog.addEventListener('keydown', (e) => {
    if (e.key !== 'Tab') return;
    const focusable = dialog.querySelectorAll(
      'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
    );
    if (!focusable.length) return;

    const first = focusable[0];
    const last = focusable[focusable.length - 1];

    // SHIFT+TAB from first => jump to last
    if (e.shiftKey && document.activeElement === first) {
      last.focus();
      e.preventDefault();
    }
    // TAB from last => jump to first
    else if (!e.shiftKey && document.activeElement === last) {
      first.focus();
      e.preventDefault();
    }
  });

  // Global ESC listener => close
  function handleGlobalEsc(e) {
    if (e.key === 'Escape') {
      closeDialog();
    }
  }
  document.addEventListener('keydown', handleGlobalEsc);

  // Return the dialog element for optional external manipulation
  return dialog;
}

/**
 * showError
 * Shows an error dialog with default text (or you can pass custom text).
 */
export function showError() {
  return createDialog(); // Uses default title/content from createDialog‚Äôs defaults
}
  
//////////////////////////
// 6) VISITOR COUNTER   //
//////////////////////////
  export function updateVisitorCounter() {
    try {
      const badge = document.getElementById('visitor-badge');
      const digits = document.querySelectorAll('.counter-digit');
      if (!badge || !digits.length) {
        throw new Error('Visitor counter elements not found');
      }
  
      function updateDisplay() {
        try {
          console.log('Attempting to update visitor count...');
          badge.crossOrigin = 'anonymous';
  
          // Hard-coded example
          const defaultCount = '001998';
          const paddedCount = defaultCount.padStart(6, '0');
          digits.forEach((digit, idx) => {
            digit.textContent = paddedCount[idx] || '0';
          });
  
          badge.onerror = () => {
            console.log('Badge load failed, using default count');
          };
          badge.onload = () => {
            console.log('Badge loaded successfully');
          };
        } catch (err) {
          console.error('Error in updateDisplay:', err);
        }
      }
  
      console.log('Initializing visitor counter...');
      updateDisplay();
      // Update every 5 minutes
      setInterval(updateDisplay, 300000);
  
    } catch (error) {
      console.error('Visitor counter error:', error);
    }
  }
  
///////////////////////////
// 7) TYPEWRITER EFFECT  //
///////////////////////////
  export function typewriterEffect(element) {
    const text = element.textContent;
    element.textContent = '';
    let i = 0;
    function type() {
      if (i < text.length) {
        element.textContent += text.charAt(i);
        i++;
        setTimeout(type, 100);
      }
    }
    type();
  }

//////////////////////////////
// 8) INIT CONSTRUCTION PAGE //
//////////////////////////////
  export function initConstructionPage() {
    const dateElement = document.querySelector('.construction-date .typewriter');
    if (dateElement) {
      typewriterEffect(dateElement);
    }
  }
  
/////////////////////////////
// 9) MAIN INIT SEQUENCE  //
/////////////////////////////
/**
 * For pages that want to load everything on DOMContentLoaded,
 * you can optionally import your other modules here,
 * or do partial imports depending on the page.
 */

// (Example) If you want to run specific logic automatically:
document.addEventListener('DOMContentLoaded', () => {
  // Initialize auto-linkify functionality
  initAutoLinkify();
  
  // Placeholder: you might do stuff here
  // e.g., updateVisitorCounter();
  // or call a page-specific script
});

================
File: scripts/projects.js
================
/**
 * projects.js
 * ----------------------------------
 * Loads "projects" from JSON, creates the retro project windows,
 * sets up preview logic (fetching remote HTML, injecting scripts/styles),
 * handles under-construction pages, docking/minimizing windows,
 * and optional maximize/minimize.
 *
 * Relies on the site-wide auto-linkify system in globals.js:
 *   - The .auto-linkify class + initAutoLinkify() process text like
 *     "Link: https://example.com Label: MyLink" => <a href="...">MyLink</a>
 */

import { createDialog } from './globals.js';

/**
 * Loads project data from JSON and renders the project windows.
 * 
 * @param {string} [pageSpecificConfig] - optional path to a page-specific JSON config
 */
export async function loadProjects(pageSpecificConfig) {
  try {
    // If no page-specific config, fallback to './config/projects.json'
    const configUrl = pageSpecificConfig || './config/projects.json';
    console.log(`Loading projects from ${configUrl} ...`);

    const response = await fetch(configUrl, { cache: 'no-store' });
    if (!response.ok) {
      throw new Error(`Failed to load projects: ${response.status}`);
    }
    const data = await response.json();

    // Store the data globally for use in getProjectUrl
    window.projectsData = data;

    // Check if we have a container
    const dynamicProjectsGrid = document.querySelector('.project-grid.dynamic-projects');
    if (!dynamicProjectsGrid) {
      // Not all pages will have a .dynamic-projects container
      console.log('No .project-grid.dynamic-projects found; skipping project rendering.');
      return;
    }

    dynamicProjectsGrid.innerHTML = '';

    // Keep track of project IDs so we don't create duplicates
    const seenIds = new Set();
    data.projects.forEach(project => {
      if (seenIds.has(project.id)) {
        console.warn(`Duplicate project ID found: ${project.id}`);
        return;
      }
      seenIds.add(project.id);

      // Build the "window" element for each project
      const projectWindow = createProjectWindow(project);
      dynamicProjectsGrid.appendChild(projectWindow);
    });

    // Initialize the "preview" and other interactions
    initializeProjectWindows();
    console.log('Projects loaded successfully');
  } catch (error) {
    console.error('Error loading projects:', error);
    // Show an error message in the container, if it exists
    const dynamicProjectsGrid = document.querySelector('.project-grid.dynamic-projects');
    if (dynamicProjectsGrid) {
      dynamicProjectsGrid.innerHTML = `
        <div class="error-message">
          <h3>Error Loading Projects</h3>
          <p>Please try refreshing the page.</p>
        </div>
      `;
    }
  }
}

/**
 * Creates a single retro Mac "window" for the given project data.
 * Returns an HTML element.
 *
 * Specs are wrapped in <ul class="auto-linkify"> so that your "Link:" text
 * is converted automatically by initAutoLinkify() from globals.js.
 */
function createProjectWindow(project) {
  const windowDiv = document.createElement('div');
  windowDiv.className = 'mac-window project-window loading';
  if (project.defaultMinimized) {
    windowDiv.classList.add('minimized');
  }
  windowDiv.setAttribute('data-project', project.id);

  // Default button links
  const buttons = project.buttons || {};
  const githubUrl = buttons.github || '#';
  const previewUrl = buttons.preview || '/projects/under-construction';
  const linkUrl = buttons.link || '/projects/under-construction';
  const githubText = buttons.githubText || 'Github'; // allow custom text for the GitHub button

  // Build the window's inner HTML with retro stylings
  // Mark the <ul> with .auto-linkify to let the global linkify function process specs.
  windowDiv.innerHTML = `
    <div class="window-title-bar">
      <div class="window-controls">
        <button class="window-button ${project.defaultMinimized ? 'maximize-button' : 'minimize-button'}" 
                aria-label="${project.defaultMinimized ? 'Maximize window' : 'Minimize window'}"></button>
        <button class="window-button quick-link-button" 
                aria-label="Quick link to project"
                data-link="${linkUrl}"></button>
      </div>
      <div class="window-title">${project.title || 'Untitled Project'}</div>
      ${
        githubUrl !== '#'
          ? `<a href="${githubUrl}" class="project-link-button">${githubText}</a>`
          : ''
      }
    </div>
    <div class="content">
      <h3>${project.subtitle || ''}</h3>
      <p>${project.description || ''}</p>
      <ul class="auto-linkify">
        ${(project.specs || []).map(spec => `<li>${spec}</li>`).join('')}
      </ul>
      <div class="project-actions">
        <button class="project-button preview" data-project="${project.id}">Preview</button>
        <a href="${linkUrl}" class="project-button link">Link</a>
      </div>
    </div>
  `;

  // Add minimize/maximize functionality
  const minMaxButton = windowDiv.querySelector('.window-button:first-child');
  minMaxButton.addEventListener('click', (e) => {
    e.stopPropagation();
    toggleMinimize(windowDiv, minMaxButton);
  });

  // Add quick link functionality
  const quickLinkButton = windowDiv.querySelector('.window-button.quick-link-button');
  quickLinkButton.addEventListener('click', (e) => {
    e.stopPropagation();
    const linkUrl = quickLinkButton.getAttribute('data-link');
    if (linkUrl && linkUrl !== '#') {
      window.location.href = linkUrl;
    }
  });

  // If window is minimized by default, add it to the dock
  if (project.defaultMinimized && dockManager) {
    // Small delay to ensure the dock is ready
    setTimeout(() => {
      dockManager.addMinimizedWindow(windowDiv);
    }, 100);
  }

  // Remove the "loading" class after a slight delay to allow CSS transitions
  setTimeout(() => windowDiv.classList.remove('loading'), 100);

  return windowDiv;
}

/**
 * Manages dock windows for minimized project windows
 */
class DockManager {
  constructor(projectGrid) {
    this.projectGrid = projectGrid;
    this.docks = [];
    this.windowsPerDock = 4;
    this.originalPositions = new Map(); // Store original positions
  }

  addMinimizedWindow(window) {
    // Store original position if not already stored
    if (!this.originalPositions.has(window)) {
      const siblings = Array.from(this.projectGrid.children);
      const position = siblings.indexOf(window);
      this.originalPositions.set(window, position);
    }

    let targetDock = this.findAvailableDock() || this.createNewDock();
    targetDock.querySelector('.dock-content').appendChild(window);
    this.updateDockTitles();
    this.moveDocksToEnd();
  }

  removeMinimizedWindow(window) {
    const dock = window.closest('.dock-window');
    if (!dock) return;

    // Store original position but don't use it for placement
    const originalPosition = this.originalPositions.get(window);
    this.originalPositions.delete(window);

    // Find the first minimized window in the project grid, if any
    const projectGrid = this.projectGrid;
    const minimizedWindows = Array.from(projectGrid.children).filter(
      el => el.classList.contains('dock-window')
    );
    
    if (minimizedWindows.length > 0) {
      // Insert before the first minimized window
      projectGrid.insertBefore(window, minimizedWindows[0]);
    } else {
      // If no minimized windows, append to the end
      projectGrid.appendChild(window);
    }

    // Check if dock is empty
    const dockContent = dock.querySelector('.dock-content');
    if (!dockContent.children.length) {
      dock.remove();
      this.docks = this.docks.filter(d => d !== dock);
    }

    this.updateDockTitles();
    this.moveDocksToEnd();
  }

  moveDocksToEnd() {
    // Move all dock windows to the end of the grid
    this.docks.forEach(dock => {
      this.projectGrid.appendChild(dock);
    });
  }

  findAvailableDock() {
    return this.docks.find(
      dock => dock.querySelector('.dock-content').children.length < this.windowsPerDock
    );
  }

  createNewDock() {
    const dock = document.createElement('div');
    dock.className = 'mac-window dock-window';
    dock.innerHTML = `
      <div class="window-title-bar">
        <div class="window-controls">
          <button class="window-button maximize-button" aria-label="Maximize all windows"></button>
        </div>
        <div class="window-title">Minimized Windows</div>
      </div>
      <div class="dock-content"></div>
    `;

    // Optionally add a "maximize all" feature
    const maximizeBtn = dock.querySelector('.window-button.maximize-button');
    if (maximizeBtn) {
      maximizeBtn.addEventListener('click', () => this.maximizeAllInDock(dock));
    }

    this.docks.push(dock);
    this.projectGrid.appendChild(dock);
    this.updateDockTitles();
    return dock;
  }

  maximizeAllInDock(dock) {
    try {
      console.log('Maximizing all windows in dock');
      const minimizedWindows = Array.from(dock.querySelectorAll('.project-window.minimized'));
      if (!minimizedWindows.length) {
        console.log('No minimized windows found in dock');
        return;
      }

      minimizedWindows.forEach((window, i) => {
        // Emulate a click on the "maximize" button
        const maxBtn = window.querySelector('.window-button.maximize-button');
        if (maxBtn) {
          maxBtn.click();
        }
      });

      // If that empties the dock, remove the dock
      const dockContent = dock.querySelector('.dock-content');
      if (!dockContent.children.length) {
        dock.remove();
        this.docks = this.docks.filter(d => d !== dock);
        this.updateDockTitles();
      }
    } catch (error) {
      console.error('Error maximizing all in dock:', error);
    }
  }

  updateDockTitles() {
    this.docks.forEach((dock, index) => {
      const title = dock.querySelector('.window-title');
      const count = dock.querySelector('.dock-content').children.length;
      title.textContent = `Minimized Windows (${index + 1}/${this.docks.length})`;
    });
  }
}

// Initialize dock manager after DOM is loaded
let dockManager;
document.addEventListener('DOMContentLoaded', () => {
  const projectGrid = document.querySelector('.project-grid');
  if (projectGrid) {
    dockManager = new DockManager(projectGrid);
  }
});

/**
 * Toggles the minimize/maximize state of a project window
 */
function toggleMinimize(projectWindow, button) {
  if (projectWindow.classList.contains('minimized')) {
    // Maximize
    projectWindow.classList.remove('minimized');
    button.classList.remove('maximize-button');
    button.classList.add('minimize-button');
    button.setAttribute('aria-label', 'Minimize window');
    dockManager.removeMinimizedWindow(projectWindow);
  } else {
    // Minimize
    projectWindow.classList.add('minimized');
    button.classList.remove('minimize-button');
    button.classList.add('maximize-button');
    button.setAttribute('aria-label', 'Maximize window');
    dockManager.addMinimizedWindow(projectWindow);
  }
}

/**
 * Helper: build a URL based on project ID.
 * Uses the preview URL from the project data, if available.
 */
function getProjectUrl(projectId) {
  console.log('Getting URL for project:', projectId);
  const projectWindow = document.querySelector(`.project-window[data-project="${projectId}"]`);
  if (!projectWindow) {
    console.log('No project window found, using fallback');
    return '/desktop/infra/under-construction';
  }

  const projectData = window.projectsData?.projects?.find(p => p.id === projectId);
  console.log('Found project data:', projectData);

  if (projectData?.buttons?.preview) {
    console.log('Using preview URL from project data:', projectData.buttons.preview);
    return projectData.buttons.preview;
  }

  console.log('No preview URL found, using fallback');
  return '/desktop/infra/under-construction';
}

/**
 * Loads and displays remote project content in the preview window
 */
async function loadProjectPreview(projectId, previewWindow, previewContent) {
  const url = getProjectUrl(projectId);
  // If user gave a direct .html link, use it. Otherwise, append index.html
  const fetchUrl = url.endsWith('.html') ? url : `${url}${url.endsWith('/') ? '' : '/'}index.html`;

  const response = await fetch(fetchUrl, {
    cache: 'no-store',
    headers: { 'Cache-Control': 'no-cache', 'Pragma': 'no-cache' }
  });

  if (!response.ok) {
    throw new Error(`Project content not found: ${response.status}`);
  }

  const content = await response.text();
  const doc = new DOMParser().parseFromString(content, 'text/html');
  const mainWindow = doc.querySelector('main.mac-window');

  if (!mainWindow) {
    throw new Error('Invalid project content structure (no <main.mac-window>)');
  }

  // Show preview overlay
  previewWindow.classList.add('active');
  document.body.classList.add('preview-open');

  // Clear old preview content
  previewContent.innerHTML = '';

  // Re-inject remote page content (styles, scripts, main window)
  setupPreviewContent(fetchUrl, doc, mainWindow, previewContent);
}

/**
 * Sets up the content of the preview window, including injecting base href, styles, scripts, etc.
 */
function setupPreviewContent(fetchUrl, doc, mainWindow, previewContent) {
  // 1) Base tag for correct relative paths
  const baseUrl = new URL(fetchUrl, window.location.origin).href;
  const baseTag = document.createElement('base');
  baseTag.href = baseUrl.endsWith('/')
    ? baseUrl
    : baseUrl.substring(0, baseUrl.lastIndexOf('/') + 1);
  previewContent.appendChild(baseTag);

  // 2) Copy over <link rel="stylesheet" ... >
  doc.querySelectorAll('link[rel="stylesheet"]').forEach(styleLink => {
    if (!styleLink.href) return;
    const newLink = document.createElement('link');
    newLink.rel = 'stylesheet';
    try {
      const absoluteUrl = new URL(styleLink.href, baseUrl);
      newLink.href = absoluteUrl.href;
      previewContent.appendChild(newLink);
    } catch (e) {
      console.warn('Invalid stylesheet URL:', styleLink.href);
    }
  });

  // 3) Copy <script> tags
  doc.querySelectorAll('script').forEach(script => {
    const newScript = document.createElement('script');
    if (script.src) {
      try {
        const absoluteUrl = new URL(script.src, baseUrl);
        newScript.src = absoluteUrl.href;
      } catch (e) {
        console.warn('Invalid script URL:', script.src);
        return;
      }
    }
    newScript.textContent = script.textContent;
    previewContent.appendChild(newScript);
  });

  // 4) Finally, clone the <main.mac-window> content
  previewContent.appendChild(mainWindow.cloneNode(true));
}

/**
 * Initialize "preview" functionality for project windows
 */
function initializeProjectWindows() {
  const projectWindows = document.querySelectorAll('.project-window');
  const previewButtons = document.querySelectorAll('.project-button.preview');
  const previewWindow = document.querySelector('.project-preview');
  const exitButton = previewWindow?.querySelector('.exit-button');
  const previewContent = previewWindow?.querySelector('.preview-content');

  if (!previewWindow || !exitButton || !previewContent) {
    console.warn('Project preview elements not found. Preview feature disabled.');
    return;
  }

  // Preview button: fetch remote page, load content, show overlay
  projectWindows.forEach(win => {
    const previewButton = win.querySelector('.project-button.preview');
    if (previewButton) {
      previewButton.addEventListener('click', async () => {
        try {
          await loadProjectPreview(
            previewButton.dataset.project,
            previewWindow,
            previewContent
          );
        } catch (error) {
          // On any error, show a dialog
          createDialog({
            title: 'Preview Error',
            content: `This project preview is not available yet. (${error.message})`,
            onClose: () => {
              // Hide the overlay if the user closes the error dialog
              previewWindow.classList.remove('active');
              document.body.classList.remove('preview-open');
              previewContent.innerHTML = '';
            },
          });
        }
      });
    }
  });

  // Exit button -> hide overlay
  exitButton.addEventListener('click', () => {
    previewWindow.classList.remove('active');
    document.body.classList.remove('preview-open');
    previewContent.innerHTML = '';
  });

  // ESC key to close preview
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && previewWindow.classList.contains('active')) {
      exitButton.click();
    }
  });
}

================
File: scripts/socials.js
================
/**
 * socials.js
 * ----------------------------------
 * Reusable code to load & render social link data.
 * Allows for a default or a page-specific config.
 */

import { createDialog } from './globals.js';

/**
 * Attempt to load social config
 *  - If pageSpecificConfig is given, try that first
 *  - else use ./config/socials.json
 */
async function loadSocialConfig(pageSpecificConfig) {
  const configUrl = pageSpecificConfig || './config/socials.json';
  try {
    console.log(`Loading social config from: ${configUrl}`);
    const response = await fetch(configUrl);
    if (!response.ok) {
      throw new Error(`Failed to load social config: ${response.status}`);
    }
    const data = await response.json();
    console.log('Social config loaded successfully:', data);
    return data;
  } catch (error) {
    console.error('Error loading social config:', error);
    return null;
  }
}

/**
 * Generate social links within a container that has a `.social-grid[role="list"]`
 * Optionally pass a custom config path
 */
export async function generateSocialLinks(pageSpecificConfig) {
  const config = await loadSocialConfig(pageSpecificConfig);
  if (!config) {
    console.error('No social config loaded');
    return;
  }

  const socialGrid = document.querySelector('.social-grid[role="list"]');
  if (!socialGrid) {
    console.error('No social-grid found on this page. Skipping socials.');
    return;
  }

  console.log('Clearing social grid');
  socialGrid.innerHTML = '';

  // Create social links
  for (const [key, social] of Object.entries(config)) {
    try {
      console.log(`Creating social link for ${key}:`, social);
      
      // Validate required properties
      if (!social.icon || !social.label || !social.type) {
        console.warn(`Skipping social ${key}: missing required properties`);
        continue;
      }

      const isLink = social.type === 'link';
      if (isLink && !social.url) {
        console.warn(`Skipping social ${key}: missing URL for link type`);
        continue;
      }

      const element = document.createElement(isLink ? 'a' : 'button');
      element.className = `social-link social-${key}`;
      element.setAttribute('role', 'listitem');
      element.setAttribute('aria-label', social.label);
      element.setAttribute('aria-haspopup', social.type === 'dialog' ? 'dialog' : 'false');

      if (isLink) {
        element.href = social.url;
        element.target = '_blank';
        element.rel = 'noopener noreferrer';
      }

      element.innerHTML = `
        <span class="social-icon" aria-hidden="true">${social.icon}</span>
        <span class="social-label">${social.label}</span>
      `;

      socialGrid.appendChild(element);

      // If it's a dialog type, set up click handler to show dialog
      if (social.type === 'dialog') {
        element.addEventListener('click', (e) => {
          e.preventDefault();
          
          // Build dialog content
          let content = '';
          if (social.dialogContent) {
            content += `<p>${social.dialogContent}</p>`;
          }
          content += `<p class="protected-content">${social.value}</p>`;

          createDialog({
            title: social.label,
            content: content,
            isEncoded: Boolean(social.encrypt),
            onClose: () => {
              console.log(`${key} dialog closed`);
            }
          });
        });
      }
    } catch (error) {
      console.error(`Error creating social link for ${key}:`, error);
    }
  }
}

================
File: styles/construction.css
================
/* ===============================
 * Construction Page Styles
 * =============================== */

/* Construction Page Content */
.construction-content {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    height: 100%;
    text-align: center;
    padding: 2rem;
    font-family: "Courier New", monospace;
}

.construction-title {
    font-size: 2rem;
    margin-bottom: 2rem;
    letter-spacing: 0.2em;
    border-bottom: none;
    animation: blink 2s infinite;
}

.construction-message {
    font-size: 1.2rem;
    margin-bottom: 2rem;
    line-height: 1.5;
}

.construction-animation {
    font-size: 2rem;
    margin: 2rem 0;
    padding: 1rem;
    border: 2px dashed var(--primary-color);
    border-radius: 4px;
    text-align: center;
}

.construction-animation a {
    color: var(--secondary-color);
    text-decoration: none;
    font-weight: bold;
    padding: 0 4px;
    border-bottom: 2px solid var(--secondary-color);
    transition: all 0.2s ease;
}

.construction-animation a:hover {
    background: var(--secondary-color);
    color: var(--window-bg);
}

@keyframes blink {
    0%, 100% { opacity: 1; }
    50%      { opacity: 0.5; }
}

.construction-divider {
    width: 50%;
    height: 2px;
    background: repeating-linear-gradient(
        90deg,
        var(--primary-color),
        var(--primary-color) 10px,
        transparent 10px,
        transparent 20px
    );
    margin: 2rem 0;
}

================
File: styles/desktop.css
================
/* ===============================
 * 2) desktop.css
 * =============================== */

/* Desktop Icons & Layout */
.desktop-icons {
    position: fixed;
    top: 40px;
    right: 20px;
    display: flex;
    flex-direction: column;
    gap: 20px;
    z-index: 1;
    transition: transform 0.3s ease;
}
.desktop-icon {
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
    width: 64px;
    cursor: pointer;
    transition: transform 0.2s ease;
    text-decoration: none;
    color: inherit;
}
.desktop-icon:hover {
    transform: scale(1.05);
}
.icon-image {
    width: 32px;
    height: 32px;
    margin-bottom: 5px;
    background: var(--menu-bg);
    border: 1px solid var(--window-border);
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 20px;
}
.icon-label {
    font-family: "Courier New", monospace;
    font-size: 11px;
    color: var(--window-border);
    background: var(--menu-bg);
    padding: 2px 4px;
    border-radius: 0;
    border: 1px solid var(--window-border);
}

/* Mobile toggling for .desktop-icons */
@media (max-width: 768px) {
    .desktop-icons {
        right: 5px;
        gap: 10px;
        transform: translateX(100%);
    }
    .desktop-icons.active {
        transform: translateX(0);
    }
    .desktop-icon {
        transform: scale(0.8);
    }
    .icon-label {
        font-size: 10px;
    }
}

/* The mobile "‚ãÆ" toggle button */
.menu-toggle {
    display: none;
    position: fixed;
    top: 50%;
    right: 0;
    width: 20px;
    height: 40px;
    background: var(--menu-bg);
    border: 1px solid var(--window-border);
    border-right: none;
    border-radius: 4px 0 0 4px;
    cursor: pointer;
    z-index: 2;
    align-items: center;
    justify-content: center;
}
@media (max-width: 768px) {
    .menu-toggle {
        display: flex;
    }
}

/* ===============================
 * Desktop-Specific Window Styles
 * =============================== */

/* Main Window (.mac-window) - Desktop specific positioning */
main.mac-window {
    width: calc(100% - var(--window-margin) * 2);
    max-width: var(--max-width);
    margin: var(--window-margin) auto;
    position: relative;
}

/* Main window content padding */
main.mac-window > .content {
    padding: var(--spacing);
}

/* Forms */
input, textarea {
    width: 100%;
    padding: 0.5rem;
    border: 1px solid var(--window-border);
    background-color: var(--window-bg);
    font-family: "Courier New", monospace;
    margin-top: 0.25rem;
}
.form-group {
    margin-bottom: 1.5rem;
}

/* Notebook Header */
.notebook-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 2rem;
    font-family: "Courier New", monospace;
    border-bottom: 1px dashed var(--primary-color);
    padding-bottom: 1rem;
    position: relative;
}
.notebook-header::after {
    content: '';
    position: absolute;
    bottom: -5px;
    left: 0;
    right: 0;
    height: 1px;
    border-bottom: 1px dashed var(--primary-color);
    opacity: 0.5;
}
.header-left { flex: 1; }
.header-right {
    flex-shrink: 0;
    margin-left: 2rem;
    width: 45px;
    height: 45px;
}
.headshot {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border: 1px solid var(--window-border);
    border-radius: 4px;
    display: block;
}
.date,
.subject {
    margin: 0.5rem 0;
    font-size: 0.9rem;
    color: var(--primary-color);
}
.typewriter {
    border-bottom: 1px solid var(--primary-color);
    padding: 0 0.5rem;
}

/* Responsive: Some generic smaller screen adjustments */
@media (max-width: 480px) {
    .window-title {
        max-width: 150px;
    }
    .menu-item {
        max-width: 40px;
    }
    .menu-item:nth-last-child(-n+2) {
        display: none;
    }
}

================
File: styles/global.css
================
/* ===============================
 * 1) global.css
 * =============================== */

/* 1) Root Variables & Base Reset */
:root {
    --primary-color: #2b2b2b;
    --secondary-color: #008b8b;  /* Vintage teal */
    --accent-color: #d4a017;     /* Mustard yellow */
    --background-color: #f5e6d3; /* Aged paper */
    --text-color: #2b2b2b;
    --menu-bg: #f5e6d3;
    --window-bg: #fff9f0;        /* Slightly warmer white */
    --window-border: #2b2b2b;
    --grid-color: rgba(70, 40, 20, 0.1); /* Subtle brown grid */
    --max-width: 1000px;
    --spacing: 2rem;
    --window-margin: 40px; /* Space around main window */
}

@media (max-width: 768px) {
    :root {
        --window-margin: 10px;
        --spacing: 1rem;
    }
}

/* Engineering Paper Background, Body Reset */
body {
    background-color: var(--background-color);
    padding-top: 40px;
    margin: 0;
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    align-items: center;
    background-image:
        linear-gradient(var(--grid-color) 1px, transparent 1px),
        linear-gradient(90deg, var(--grid-color) 1px, transparent 1px);
    background-size: 20px 20px;
    position: relative;
}

body::after {
    content: '';
    position: fixed;
    top: 0; left: 0; right: 0; bottom: 0;
    background:
        radial-gradient(circle at 50% 50%,
                        rgba(255, 255, 240, 0.1) 0%,
                        rgba(255, 240, 200, 0.2) 100%);
    pointer-events: none;
    z-index: 1;
}

/* Typography - Engineering Style */
h1, h2, h3 {
    font-family: "Courier New", monospace;
    margin-bottom: 1.5rem;
    color: var(--primary-color);
    text-transform: uppercase;
    letter-spacing: 0.1em;
}

h1 {
    font-size: 2rem;
    border-bottom: 3px double var(--primary-color);
    padding-bottom: 0.5rem;
}

h2 {
    font-size: 1.5rem;
    border-bottom: 1px solid var(--primary-color);
    padding-bottom: 0.3rem;
}

h3 {
    font-size: 1.2rem;
}

p {
    margin-bottom: 1rem;
    color: var(--text-color);
}

/* Global Menu Bar */
.global-menu-bar {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    height: 20px;
    background: var(--menu-bg);
    border-bottom: 1px solid var(--window-border);
    display: flex;
    align-items: center;
    padding: 0 8px;
    z-index: 2000;
    font-family: "Chicago", "Helvetica Neue", sans-serif;
    font-size: 12px;
    white-space: nowrap;
    overflow: hidden;
}

.apple-menu {
    margin-right: 20px;
    padding: 2px 5px;
}
.apple-menu:hover {
    background: var(--primary-color);
    color: var(--menu-bg);
}

.menu-divider {
    width: 1px;
    height: 16px;
    background: var(--window-border);
    margin: 0 10px;
}

.menu-item {
    padding: 2px 8px;
    cursor: default;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}
.menu-item:hover {
    background: var(--primary-color);
    color: var(--menu-bg);
}

/* Notebook Header */
.notebook-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 2rem;
    font-family: "Courier New", monospace;
    border-bottom: 1px dashed var(--primary-color);
    padding-bottom: 1rem;
    position: relative;
}
.notebook-header::after {
    content: '';
    position: absolute;
    bottom: -5px;
    left: 0;
    right: 0;
    height: 1px;
    border-bottom: 1px dashed var(--primary-color);
    opacity: 0.5;
}
.header-left { flex: 1; }
.header-right {
    flex-shrink: 0;
    margin-left: 2rem;
    width: 45px;
    height: 45px;
}
.headshot {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border: 1px solid var(--window-border);
    border-radius: 4px;
    display: block;
}
.date,
.subject {
    margin: 0.5rem 0;
    font-size: 0.9rem;
    color: var(--primary-color);
}
.typewriter {
    border-bottom: 1px solid var(--primary-color);
    padding: 0 0.5rem;
}

/* Forms */
input, textarea {
    width: 100%;
    padding: 0.5rem;
    border: 1px solid var(--window-border);
    background-color: var(--window-bg);
    font-family: "Courier New", monospace;
    margin-top: 0.25rem;
}

.form-group {
    margin-bottom: 1.5rem;
}

/* Base Buttons */
button {
    background: var(--menu-bg);
    color: var(--primary-color);
    border: 2px solid var(--window-border);
    padding: 0.5rem 1rem;
    font-family: "Courier New", monospace;
    cursor: pointer;
    text-transform: uppercase;
    letter-spacing: 0.1em;
    font-size: 12px;
}

button:hover {
    background: var(--secondary-color);
    color: var(--window-bg);
}

/* Base Window & Dialog Styles */
.mac-window {
    background: var(--window-bg);
    border: 1px solid var(--window-border);
    border-radius: 6px 6px 2px 2px;
    box-shadow: 2px 2px 0 rgba(0,0,0,0.1);
}

.window-title-bar {
    display: flex;
    align-items: center;
    background: var(--menu-bg);
    border-bottom: 1px solid var(--window-border);
    border-radius: 5px 5px 0 0;
    padding: 0 8px;
    height: 24px;
    font-family: "Courier New", monospace;
    font-size: 12px;
    position: relative;
}

.window-title {
    flex: 1 1 auto;
    min-width: 0;
    text-align: center;
    font-family: "Courier New", monospace;
    letter-spacing: 0.05em;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    max-width: 200px;
    padding: 0 8px;
}

/* Window Controls */
.window-controls {
    display: flex;
    gap: 6px;
    align-items: center;
    flex: 0 0 auto;
}

/* Base window button styles */
.window-controls .window-button {
    width: 12px;
    height: 12px;
    padding: 0;
    margin: 0;
    border: 1px solid var(--window-border);
    border-radius: 50%;
    background: var(--window-bg);
    position: relative;
    cursor: pointer;
    text-transform: none;
    letter-spacing: normal;
}

/* Middle bar for all window buttons */
.window-controls .window-button::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 8px;
    height: 2px;
    background: rgba(0, 0, 0, 0.3);
    opacity: 0.5;
}

/* Close/Exit button styles */
.window-controls .window-button.close-button,
.mac-dialog .window-controls .window-button {
    background: #ff3b30 !important;  /* Apple red */
    border-color: #c41e3a !important;  /* Darker red */
    cursor: pointer;
}

.window-controls .window-button.close-button:hover,
.mac-dialog .window-controls .window-button:hover {
    background: #c41e3a !important;  /* Use border color for hover */
}

/* Maximize button styles */
.window-controls .window-button.maximize-button {
    background: #2ea538 !important;  /* Muted retro Mac green */
    border-color: #1e7a28 !important;  /* Darker muted green */
    cursor: pointer;
}

/* Minimize button styles */
.window-controls .window-button.minimize-button {
    background: #ffbd2e !important;  /* Yellow */
    border-color: #dea123 !important;  /* Darker yellow */
    cursor: pointer;
}

/* Hover states for interactive buttons */
.window-controls .window-button.maximize-button:hover {
    background: #1e7a28 !important;  /* Use border color for hover */
}

.window-controls .window-button.minimize-button:hover {
    background: #dea123 !important;  /* Use border color for hover */
}

/* Mac Dialog Base Styles */
.mac-dialog {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%) scale(0.9);
    background: var(--window-bg);
    border: 1px solid var(--window-border);
    border-radius: 6px;
    width: 300px;
    opacity: 0;
    visibility: hidden;
    transition: all 0.2s ease;
    z-index: 2000;
}

.mac-dialog.active {
    transform: translate(-50%, -50%) scale(1);
    opacity: 1;
    visibility: visible;
}

.mac-dialog .window-title-bar {
    display: flex;
    align-items: center;
    height: 24px;
    background: var(--menu-bg);
    border-bottom: 1px solid var(--window-border);
    padding: 0 8px;
}

.mac-dialog .window-title {
    flex: 1;
    text-align: center;
    font-family: "Courier New", monospace;
    font-size: 12px;
}

.mac-dialog .content {
    padding: 1rem;
}

/* Responsive: Some generic smaller screen adjustments */
@media (max-width: 480px) {
    .menu-item {
        max-width: 40px;
    }
    .menu-item:nth-last-child(-n+2) {
        display: none;
    }
    .window-title {
        max-width: 150px;
    }
    .mac-dialog {
        width: 90%;
        max-width: 300px;
    }
}

================
File: styles/projects.css
================
/* ===============================
 * 3) projects.css
 * =============================== */

/* Project Grid & Windows */
.project-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 2rem;
    margin: calc(-1 * var(--spacing));
    margin-top: 0;
    padding: var(--spacing);
    position: relative;
}

.project-window {
    position: relative;
    width: 100%;
    background: var(--window-bg);
    border: 1px solid var(--window-border);
    border-radius: 6px 6px 2px 2px;
    box-shadow: 2px 2px 0 rgba(0,0,0,0.1);
    margin-bottom: 1.5rem;
    display: flex;
    flex-direction: column;
    min-height: 300px;
    transition: transform 0.2s ease, box-shadow 0.2s ease, min-height 0.3s ease;
    pointer-events: auto;
}

/* Minimized state */
.project-window.minimized {
    min-height: auto;
}

/* Keep preview button visible even in minimized state */
.project-window.minimized .content {
    display: none;
}

/* Make title bar clickable in minimized state */
.project-window.minimized .window-title-bar {
    cursor: pointer;
    pointer-events: all;
}

/* Keep hover effect only when not minimized */
.project-window:not(.minimized):hover {
    transform: translateY(-2px);
    box-shadow: 4px 4px 0 rgba(0,0,0,0.15);
}

main.mac-window.project-window {
    transform: none !important;
    transition: none;
}

main.mac-window.project-window:hover {
    box-shadow: 2px 2px 0 rgba(0,0,0,0.1);
}

.project-window .content {
    padding: var(--spacing);
    background: var(--window-bg);
    flex: 1;
    display: flex;
    flex-direction: column;
    pointer-events: auto;
}
.project-window .content > *:not(.project-actions) {
    flex-shrink: 0;
}
.project-window .content h3 {
    margin-top: 0;
    font-size: 1.1rem;
    color: var(--primary-color);
    border-bottom: 1px solid var(--primary-color);
    padding-bottom: 0.3rem;
    margin-bottom: 1rem;
}
.project-window .content p {
    font-family: "Courier New", monospace;
    line-height: 1.5;
    margin-bottom: 1rem;
    color: var(--text-color);
}
.project-window .content ul {
    list-style: none;
    padding: 0;
    margin: 0;
    font-family: "Courier New", monospace;
}
.project-window .content ul li {
    margin: 0.5rem 0;
    padding-left: 1rem;
    border-left: 2px solid var(--secondary-color);
    color: var(--text-color);
}

/* Project Buttons */
.project-actions {
    margin-top: auto;
    padding-top: 1rem;
    border-top: 1px solid var(--window-border);
    display: flex;
    gap: 1rem;
}
.project-button {
    flex: 1;
    background: var(--menu-bg);
    border: 1px solid var(--window-border);
    border-radius: 4px;
    padding: 0.5rem 1rem;
    font-family: "Courier New", monospace;
    font-size: 12px;
    color: var(--primary-color);
    cursor: pointer;
    transition: all 0.2s ease;
    text-align: center;
    text-decoration: none;
}
.project-button:hover {
    background: var(--window-border);
    color: var(--menu-bg);
}
.project-button.preview {
    border-color: var(--window-border);
    cursor: pointer;
    pointer-events: auto;
    user-select: none;
    position: relative;
    z-index: 10;
}
.project-button.preview:hover {
    background: var(--window-border);
}
.project-button.github {
    border-color: var(--primary-color);
}
.project-button.github:hover {
    background: var(--primary-color);
}
.project-button.link {
    border-color: var(--window-border);
}
.project-button.link:hover {
    background: var(--window-border);
    color: var(--menu-bg);
}

/* Project Link Button (upper-right corner) */
.project-link-button {
    background: #2ea538;  /* Muted retro Mac green from style guide */
    color: var(--window-bg);
    border: 1px solid #1e7a28;  /* Darker muted green from style guide */
    padding: 2px 8px;
    font-size: 12px;
    font-family: "Courier New", monospace;
    text-decoration: none;
    border-radius: 3px;
    margin-left: auto;
    transition: background 0.2s ease;
}

.project-link-button:hover {
    background: #1e7a28;  /* Use border color for hover */
}

/* Preview Window Overlay */
.project-preview {
    position: fixed;
    top: 8vh;
    left: 46.5%;
    transform: translateX(-50%);
    z-index: 2000;
    display: none;
    width: calc(100% - var(--window-margin) * 2);
    max-width: var(--max-width);
    height: 90vh;
}
.project-preview.active {
    display: block;
}
.project-preview .exit-button {
    position: absolute;
    top: -24px;
    left: 0;
    height: 24px;
    width: auto;
    padding: 0 12px;
    background: #ff3b30;  /* Apple red from style guide */
    border: 1px solid #c41e3a;  /* Darker red from style guide */
    border-radius: 5px 5px 0 0;
    border-bottom: none;
    color: var(--window-bg);
    font-family: "Courier New", monospace;
    font-size: 12px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background 0.2s ease;
    z-index: 2001;
}
.project-preview .exit-button:hover {
    background: #c41e3a;  /* Use border color for hover, matching our pattern */
}
.project-preview .preview-content {
    background: var(--window-bg);
    height: 100%;
    border: 1px solid var(--window-border);
    border-radius: 0 6px 2px 2px;
    box-shadow: 4px 4px 0 rgba(0,0,0,0.2);
    position: relative;
    z-index: 2000;
    overflow: hidden;
}
.project-preview .preview-content main.mac-window {
    margin: 20px;
    width: calc(100% - 40px);
    height: calc(100% - 44px);
    border: 1px solid var(--window-border);
    border-radius: 6px 6px 2px 2px;
    overflow: auto;
    box-shadow: 2px 2px 0 rgba(0,0,0,0.1);
    pointer-events: auto;
}
body.preview-open {
    overflow: hidden;
}
/* Error Dialog */
.error-dialog {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: var(--window-bg);
    border: 1px solid var(--window-border);
    border-radius: 6px 6px 2px 2px;
    box-shadow: 4px 4px 0 rgba(0,0,0,0.2);
    width: 300px;
    z-index: 2100;
    display: none;
    flex-direction: column;
}
.error-dialog.active {
    display: flex;
}
.error-dialog .window-title-bar {
    height: 24px;
    background: var(--menu-bg);
    border-bottom: 1px solid var(--window-border);
}
.error-dialog .window-button {
    background: #ff3b30 !important;  /* Apple red from style guide */
    border-color: #c41e3a !important;  /* Darker red from style guide */
}
.error-dialog .window-button:hover {
    background: #c41e3a !important;  /* Use border color for hover */
}
.error-dialog .content {
    padding: 2rem;
    text-align: center;
    font-family: "Courier New", monospace;
    font-size: 14px;
    color: var(--primary-color);
}

/* Overlay (for dialogs) */
.overlay {
    position: fixed;
    top: 0; left: 0; right: 0; bottom: 0;
    background: rgba(0,0,0,0.5);
    z-index: 2000;
    display: none;
}
.overlay.active {
    display: block;
}

/* Social Links, Email Dialog, etc. */
.social-links {
    padding: var(--spacing);
    margin-bottom: 0.5rem;
}
.social-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px,1fr));
    gap: 1rem;
    padding: 1rem;
}
.social-link {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem;
    background: var(--menu-bg);
    border: 1px solid var(--window-border);
    border-radius: 4px;
    text-decoration: none;
    color: var(--primary-color);
    font-family: "Courier New", monospace;
    transition: all 0.2s ease;
    text-transform: none;
}
.social-link:hover {
    background: var(--window-border);
    color: var(--menu-bg);
    transform: translateY(-2px);
    box-shadow: 2px 2px 0 rgba(0,0,0,0.1);
}
.social-icon {
    font-size: 1.2rem;
    min-width: 24px;
    text-align: center;
}
.social-label {
    font-size: 0.9rem;
    letter-spacing: 0.05em;
}

/* Email Button & Dialog */
.email-button {
    width: 100%;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem;
    background: var(--menu-bg);
    border: 1px solid var(--window-border);
    border-radius: 4px;
    text-decoration: none;
    color: var(--primary-color);
    font-family: "Courier New", monospace;
    transition: all 0.2s ease;
    cursor: pointer;
}
.email-button:hover {
    background: var(--window-border);
    color: var(--menu-bg);
    transform: translateY(-2px);
    box-shadow: 2px 2px 0 rgba(0,0,0,0.1);
}
.email-dialog {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: var(--window-bg);
    border: 1px solid var(--window-border);
    border-radius: 6px 6px 2px 2px;
    box-shadow: 4px 4px 0 rgba(0,0,0,0.2);
    width: 300px;
    z-index: 2100;
    display: none;
    flex-direction: column;
}
.email-dialog.active {
    display: flex;
}
.email-dialog .window-title-bar {
    height: 24px;
    background: var(--menu-bg);
    border-bottom: 1px solid var(--window-border);
}
.email-dialog .window-button.close-button {
    background: #ff3b30;
    border-color: #c41e3a;
}
.email-dialog .content {
    padding: 2rem;
    text-align: center;
    font-family: "Courier New", monospace;
    font-size: 14px;
    color: var(--primary-color);
}

/* Additional Mac Dialog (generic) */
.mac-dialog {
    position: fixed;
    top: 50%; left: 50%;
    transform: translate(-50%, -50%);
    background: var(--window-bg);
    border: 1px solid var(--window-border);
    border-radius: 6px 6px 2px 2px;
    box-shadow: 4px 4px 0 rgba(0,0,0,0.2);
    width: 300px;
    z-index: 2100;
    display: none;
    flex-direction: column;
}
.mac-dialog.active {
    display: flex;
}
.mac-dialog .window-title-bar {
    height: 24px;
    background: var(--menu-bg);
    border-bottom: 1px solid var(--window-border);
}
.mac-dialog .window-button.close-button {
    background: #ff3b30;
    border-color: #c41e3a;
}
.mac-dialog .content {
    padding: 2rem;
    text-align: center;
    font-family: "Courier New", monospace;
    font-size: 14px;
    color: var(--primary-color);
}
.mac-dialog .content p {
    margin: 0.5rem 0;
}

/* Visitor Counter */
.visitor-counter {
    text-align: center;
    margin: 0 auto 1rem;
    width: fit-content;
    background: var(--window-bg);
}
.counter-display {
    display: flex;
    justify-content: center;
    gap: 1px;
    background: #000;
    padding: 2px;
    border: 1px solid #444;
}
.counter-digit {
    display: inline-block;
    background: #000;
    color: #32CD32;
    font-family: "VT323", "Courier New", monospace;
    font-size: 14px;
    font-weight: bold;
    min-width: 12px;
    padding: 2px;
    text-shadow: 0 0 5px #32CD32;
}

/* Window Title Bar Link (GitHub or similar) */
.window-link {
    position: absolute;
    right: 8px;
    color: var(--window-bg);
    text-decoration: none;
    font-size: 11px;
    padding: 2px 6px;
    background: #2ea538; /* Muted retro Mac green */
    border: 1px solid #1e7a28;
    border-radius: 3px;
    transition: all 0.2s ease;
}
.window-link:hover {
    background: #1e7a28;
    color: var(--window-bg);
}

/* Special case for dock windows and minimized windows */
.dock-window .window-controls .window-button.maximize-button,
.project-window.minimized .window-controls .window-button.maximize-button {
    background: #2ea538 !important;  /* Muted retro Mac green */
    border-color: #1e7a28 !important;  /* Darker muted green */
    cursor: pointer;
    opacity: 1;
}

/* Dock Windows */
.dock-window {
    display: flex;
    flex-direction: column;
    background: var(--window-bg);
    border: 1px solid var(--window-border);
    border-radius: 6px 6px 2px 2px;
    box-shadow: 2px 2px 0 rgba(0,0,0,0.1);
    margin-bottom: 1.5rem;
}

.dock-window .dock-content {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    padding: 1rem;
    min-height: 100px;  /* Ensure dock is visible even when empty */
}

/* Minimized windows inside dock */
.dock-window .project-window.minimized {
    margin: 0;
    min-height: auto;
    cursor: default;
    transform: none;
    box-shadow: none;
}

.dock-window .project-window.minimized .window-title-bar {
    border-radius: 4px;  /* Round corners when it's just the title bar */
    cursor: default;
}

.dock-window .project-window.minimized:hover {
    background: var(--menu-bg);
}

/* Ensure maximize button in minimized windows remains clickable */
.dock-window .project-window.minimized .window-button.maximize-button {
    cursor: pointer;
}

/* Transition effects */
.project-window {
    transition: all 0.3s ease;
}

.project-window.minimized {
    min-height: auto;
}

.project-window.minimized .content {
    display: none;
}

/* Hover effect for maximize buttons */
.window-button.maximize-button:hover {
    filter: brightness(1.1);
}

.dock-window .dock-content {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    padding: 1rem;
    min-height: 100px;  /* Ensure dock is visible even when empty */
}

/* Window Controls Enhancement */
.window-controls {
    display: flex;
    gap: 6px;
    align-items: center;
    flex: 0 0 auto;
}

/* Quick link button for minimized windows */
.window-button.quick-link-button {
    background: var(--secondary-color) !important;  /* Vintage teal */
    border-color: #006666 !important;  /* Darker teal */
    cursor: pointer;
    position: relative;
    overflow: hidden;  /* Ensure the pseudo-element stays within bounds */
}

/* Plus symbol inside quick link button */
.window-button.quick-link-button::before {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 8px;
    height: 2px;
    background: rgba(0, 0, 0, 0.3);
    transform: translate(-50%, -50%);
    opacity: 0.5;
    z-index: 0;
}

.window-button.quick-link-button::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 2px;
    height: 8px;
    background: rgba(0, 0, 0, 0.3);
    transform: translate(-50%, -50%);
    opacity: 0.5;
    z-index: 0;
}

.window-button.quick-link-button:hover {
    background: #006666 !important;  /* Darker teal on hover */
}

/* Only show quick link button in minimized windows */
.project-window:not(.minimized) .window-button.quick-link-button {
    display: none;
}

================
File: styles/socials.css
================
/* ===============================
 * socials.css
 * =============================== */

/* Mac Dialog */
.mac-dialog {
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%) scale(0.9);
  background: var(--window-bg);
  border: 1px solid var(--window-border);
  border-radius: 6px;
  width: 300px;
  opacity: 0;
  visibility: hidden;
  transition: all 0.2s ease;
  z-index: 2000;
}

.mac-dialog.active {
  transform: translate(-50%, -50%) scale(1);
  opacity: 1;
  visibility: visible;
}

/* Window Title Bar */
.mac-dialog .window-title-bar {
  display: flex;
  align-items: center;
  height: 24px;
  background: var(--menu-bg);
  border-bottom: 1px solid var(--window-border);
  padding: 0 8px;
}

/* Window Controls */
.mac-dialog .window-controls {
  display: flex;
  gap: 6px;
  align-items: center;
  flex: 0 0 auto;
}

/* Window Title */
.mac-dialog .window-title {
  flex: 1;
  text-align: center;
  font-family: "Courier New", monospace;
  font-size: 12px;
}

.mac-dialog .content {
  padding: 1rem;
}

.protected-content {
  font-family: "Courier New", monospace;
  background: rgba(0,0,0,0.05);
  padding: 0.5rem;
  border-radius: 4px;
  word-break: break-all;
  margin-top: 0.5rem;
}

================
File: .cursorignore
================
documentation/

================
File: block_editor.html
================
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Block Editor Demo</title>
  <style>
    /* Basic styling for demonstration */
    body {
      font-family: sans-serif;
      margin: 1rem;
      background: #fafafa;
    }
    h1 {
      margin-bottom: 0.5rem;
    }
    .block-editor {
      display: flex;
      gap: 1rem;
    }
    .block-list,
    .preview-pane {
      flex: 1;
      border: 1px solid #ccc;
      padding: 1rem;
      background: #fff;
    }
    .block-list h2 {
      margin-top: 0;
    }
    .block-actions button {
      margin-right: 0.5rem;
    }
    .block {
      border: 1px dashed #aaa;
      padding: 0.5rem;
      margin-bottom: 1rem;
      background: #fdfdfd;
    }
    .block-type {
      font-weight: bold;
    }
    .block-controls {
      text-align: right;
    }
    .btn-remove {
      color: #c00;
      margin-left: 0.5rem;
    }
    .preview-output {
      border: 1px solid #ccc;
      padding: 1rem;
      background: #f9f9f9;
    }
    .output-json {
      margin-top: 1rem;
      white-space: pre;
      background: #eee;
      padding: 0.5rem;
    }
    /* A simple styles for "live preview" */
    .block-text h3 {
      margin: 0.5rem 0 0.25rem;
    }
    .block-text p {
      margin: 0 0 0.5rem;
    }
    .block-image figure {
      margin: 0;
      text-align: center;
    }
    .block-image img {
      max-width: 100%;
    }
    .block-quote blockquote {
      margin: 0.5rem 0;
      padding: 0.5rem 1rem;
      border-left: 4px solid #aaa;
    }
    .block-quote footer {
      font-size: 0.9em;
      font-style: italic;
      text-align: right;
      color: #555;
    }
  </style>
</head>
<body>
  <h1>Block Editor Demo</h1>
  <p>
    This is a simple example of how you can create a block-based editor that generates JSON,
    which you can feed into your static site.
  </p>

  <div class="block-editor">
    <!-- Left side: block list / editing area -->
    <div class="block-list">
      <h2>Blocks</h2>

      <div id="blocks-container"></div>

      <div class="block-actions">
        <button onclick="addTextBlock()">+ Text Block</button>
        <button onclick="addImageBlock()">+ Image Block</button>
        <button onclick="addQuoteBlock()">+ Quote Block</button>
      </div>

      <hr>
      <button onclick="exportJSON()">Export JSON</button>
    </div>

    <!-- Right side: preview pane -->
    <div class="preview-pane">
      <h2>Live Preview</h2>
      <div class="preview-output" id="preview-output">
        <!-- We will render live block preview here -->
      </div>
      <h3>Block JSON</h3>
      <pre class="output-json" id="output-json"></pre>
    </div>
  </div>

  <script>
    // Keep track of all blocks in an array
    const blocks = [];

    // Rerender the entire editor UI and preview
    function rerender() {
      const container = document.getElementById('blocks-container');
      container.innerHTML = ''; // Clear old UI

      const previewOut = document.getElementById('preview-output');
      previewOut.innerHTML = ''; // Clear preview

      blocks.forEach((block, index) => {
        // 1. Render Editor UI for each block
        const blockDiv = document.createElement('div');
        blockDiv.className = 'block';

        // Build block form fields based on type
        if (block.type === 'TextBlock') {
          blockDiv.innerHTML = `
            <div class="block-type">Text Block</div>
            <label>Heading: <input type="text" oninput="updateBlock(${index}, 'heading', this.value)" value="${block.heading || ''}"></label><br>
            <label>Body: <textarea oninput="updateBlock(${index}, 'body', this.value)">${block.body || ''}</textarea></label>
            <div class="block-controls">
              <button class="btn-remove" onclick="removeBlock(${index})">Remove</button>
            </div>
          `;
        } else if (block.type === 'ImageBlock') {
          blockDiv.innerHTML = `
            <div class="block-type">Image Block</div>
            <label>Image URL: <input type="text" oninput="updateBlock(${index}, 'imageUrl', this.value)" value="${block.imageUrl || ''}"></label><br>
            <label>Caption: <input type="text" oninput="updateBlock(${index}, 'caption', this.value)" value="${block.caption || ''}"></label>
            <div class="block-controls">
              <button class="btn-remove" onclick="removeBlock(${index})">Remove</button>
            </div>
          `;
        } else if (block.type === 'QuoteBlock') {
          blockDiv.innerHTML = `
            <div class="block-type">Quote Block</div>
            <label>Quote: <textarea oninput="updateBlock(${index}, 'quote', this.value)">${block.quote || ''}</textarea></label><br>
            <label>Author: <input type="text" oninput="updateBlock(${index}, 'author', this.value)" value="${block.author || ''}"></label>
            <div class="block-controls">
              <button class="btn-remove" onclick="removeBlock(${index})">Remove</button>
            </div>
          `;
        } else {
          // Unknown block type
          blockDiv.innerHTML = `
            <div class="block-type">Unknown Block Type</div>
            <div class="block-controls">
              <button class="btn-remove" onclick="removeBlock(${index})">Remove</button>
            </div>
          `;
        }

        container.appendChild(blockDiv);

        // 2. Render the preview
        const previewBlock = document.createElement('div');
        previewBlock.className = 'block-' + block.type.replace('Block','').toLowerCase();
        if (block.type === 'TextBlock') {
          previewBlock.innerHTML = `
            <h3>${escapeHTML(block.heading || '')}</h3>
            <p>${escapeHTML(block.body || '')}</p>
          `;
        } else if (block.type === 'ImageBlock') {
          previewBlock.innerHTML = `
            <figure>
              <img src="${escapeHTML(block.imageUrl || '')}" alt="${escapeHTML(block.caption || '')}">
              <figcaption>${escapeHTML(block.caption || '')}</figcaption>
            </figure>
          `;
        } else if (block.type === 'QuoteBlock') {
          previewBlock.innerHTML = `
            <blockquote>
              <p>${escapeHTML(block.quote || '')}</p>
              <footer>‚Äî ${escapeHTML(block.author || '')}</footer>
            </blockquote>
          `;
        }
        previewOut.appendChild(previewBlock);
      });

      // Finally, update JSON output
      document.getElementById('output-json').textContent = JSON.stringify(blocks, null, 2);
    }

    // Utility to sanitize text
    function escapeHTML(str) {
      if (!str) return '';
      return str
        .replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;')
        .replace(/"/g, '&quot;');
    }

    // Each block is an object with a "type" and content fields
    function addTextBlock() {
      blocks.push({ type: 'TextBlock', heading: '', body: '' });
      rerender();
    }
    function addImageBlock() {
      blocks.push({ type: 'ImageBlock', imageUrl: '', caption: '' });
      rerender();
    }
    function addQuoteBlock() {
      blocks.push({ type: 'QuoteBlock', quote: '', author: '' });
      rerender();
    }

    // Update a block‚Äôs field
    function updateBlock(index, field, value) {
      blocks[index][field] = value;
      rerender(); // You may decide to do partial re-renders for performance
    }

    // Remove a block
    function removeBlock(index) {
      blocks.splice(index, 1);
      rerender();
    }

    // Export JSON
    function exportJSON() {
      const jsonStr = JSON.stringify(blocks, null, 2);
      alert('Block JSON:\n' + jsonStr);
      // In real usage, you might POST this JSON to a server or download it
    }

    // Initial Render
    rerender();
  </script>
</body>
</html>

================
File: CNAME
================
pauljunsukhan.com

================
File: index.html
================
<!DOCTYPE html>
<html lang="en" itemscope itemtype="http://schema.org/WebPage">
<head>
  <!-- Basic Meta Tags -->
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=5.0">
  <title>Paul Han - Innovative Software & Hardware Engineer</title>

  <!-- SEO Optimization Section -->
  <meta name="description" content="Paul Han's Portfolio - Innovative Software & Hardware Engineer crafting elegant solutions. Explore projects in AI, machine learning, and creative problem-solving.">
  <meta name="keywords" content="software engineer, hardware engineer, full stack developer, creative problem solver, technical writing, system design, engineering solutions, AI, machine learning, portfolio">
  <meta name="author" content="Paul Junsuk Han">
  <meta name="robots" content="index, follow, max-image-preview:large">
  <meta name="theme-color" content="#f5e6d3">
  <meta name="google" content="nositelinkssearchbox">
  <meta name="google" content="notranslate">
  <meta name="format-detection" content="telephone=no">

  <!-- Favicon Section -->
  <link rel="apple-touch-icon" sizes="180x180" href="assets/site/apple-touch-icon.png">
  <link rel="icon" type="image/png" sizes="32x32" href="assets/site/favicon-32x32.png">
  <link rel="icon" type="image/png" sizes="16x16" href="assets/site/favicon-16x16.png">
  <link rel="manifest" href="site.webmanifest">

  <!-- Open Graph / Facebook -->
  <meta property="og:type" content="website">
  <meta property="og:url" content="https://pauljunsukhan.com/">
  <meta property="og:title" content="Paul Han - Innovative SWE & HWE | Creative Problem Solver">
  <meta property="og:description" content="Discover innovative software & hardware engineering projects. From AI and machine learning to creative problem-solving, explore my journey in technology and engineering.">
  <meta property="og:image" content="https://pauljunsukhan.com/assets/site/social-preview.webp">
  <meta property="og:image:alt" content="https://pauljunsukhan.com/assets/site/social-preview.png">
  <meta property="og:image:type" content="image/webp">
  <meta property="og:site_name" content="Paul Han Portfolio">

  <!-- Twitter -->
  <meta name="twitter:card" content="summary_large_image">
  <meta name="twitter:url" content="https://pauljunsukhan.com/">
  <meta name="twitter:title" content="Paul Han - Innovative SWE & HWE | Creative Problem Solver">
  <meta name="twitter:description" content="Discover innovative software & hardware engineering projects. From AI and machine learning to creative problem-solving, explore my journey in technology and engineering.">
  <meta name="twitter:image" content="https://pauljunsukhan.com/assets/site/social-preview.webp">
  <meta name="twitter:image:alt" content="https://pauljunsukhan.com/assets/site/social-preview.png">
  <meta name="twitter:creator" content="@yourtwitterhandle">
  <meta name="twitter:site" content="@yourtwitterhandle">

  <!-- Canonical & Language -->
  <link rel="canonical" href="https://pauljunsukhan.com/">
  <link rel="alternate" hreflang="en" href="https://pauljunsukhan.com/">

  <!-- Styles -->
  <!-- Example: load all relevant CSS. You might have ‚Äúglobal.css‚Äù, ‚Äúdesktop.css‚Äù, ‚Äúprojects.css‚Äù -->
  <link rel="preload" href="styles/global.css" as="style" onload="this.onload=null;this.rel='stylesheet'">
  <link rel="preload" href="styles/desktop.css" as="style" onload="this.onload=null;this.rel='stylesheet'">
  <link rel="preload" href="styles/projects.css" as="style" onload="this.onload=null;this.rel='stylesheet'">
  <noscript>
    <link rel="stylesheet" href="styles/global.css">
    <link rel="stylesheet" href="styles/desktop.css">
    <link rel="stylesheet" href="styles/projects.css">
  </noscript>
</head>

<body>
  <!-- Classic Mac Menu Bar -->
  <nav class="global-menu-bar" role="navigation" aria-label="Main navigation">
    <span class="apple-menu" aria-label="Apple menu">üçé</span>
    <div class="menu-divider" aria-hidden="true"></div>
    <span class="menu-item" role="menuitem">File</span>
    <span class="menu-item" role="menuitem">Edit</span>
    <span class="menu-item" role="menuitem">View</span>
    <span class="menu-item" role="menuitem">Special</span>
  </nav>

  <!-- Desktop Icons (for quick nav) + Mobile Toggle -->
  <button class="menu-toggle" aria-label="Toggle navigation menu" aria-expanded="false">‚ãÆ</button>
  <nav class="desktop-icons" role="navigation" aria-label="Desktop shortcuts">
    <a href="/" class="desktop-icon" aria-label="Home">
      <div class="icon-image" aria-hidden="true">üíæ</div>
      <div class="icon-label">Home</div>
    </a>
    <a href="#projects" class="desktop-icon" aria-label="Projects">
      <div class="icon-image" aria-hidden="true">üìÅ</div>
      <div class="icon-label">Projects</div>
    </a>
    <a href="#about" class="desktop-icon" aria-label="Notes">
      <div class="icon-image" aria-hidden="true">üìù</div>
      <div class="icon-label">Notes</div>
    </a>
    <a href="#contact" class="desktop-icon" aria-label="Contact">
      <div class="icon-image" aria-hidden="true">‚úâÔ∏è</div>
      <div class="icon-label">Contact</div>
    </a>
  </nav>

  <!-- Main Window -->
  <main class="mac-window" role="main">
    <header class="window-title-bar" role="banner">
      <div class="window-controls" aria-label="Window controls">
      </div>
      <div class="window-title">IE 8.0 and Above</div>
    </header>

    <div class="content">
      <!-- Hero / Intro Section -->
      <section id="hero" aria-labelledby="hero-title">
        <div class="notebook-header">
          <div class="header-left">
            <time class="date" datetime="2024-01-03">
              Last Update: <span class="typewriter">01.03.2024</span>
            </time>
          </div>
          <div class="header-right">
            <img
              src="assets/site/headshot.png"
              alt="Paul Han - Software and Hardware Engineer"
              class="headshot"
              loading="lazy"
              width="180"
              height="180"
            >
          </div>
        </div>
        <h1 id="hero-title">Paul Junsuk Han</h1>
        <p class="subtitle">
          SWE, HWE, Designer, Writer, Neurotech, AI. Yale; ex Meta
        </p>
      </section>

      <!-- About / Notes Section -->
      <section id="about" aria-labelledby="about-title">
        <div class="technical-sketch">
          <h2 id="about-title">Field Notes</h2>
          <div id="notes-content" class="notes-content">
            <!-- Optionally load markdown or static HTML content here -->
          </div>
        </div>
      </section>

      <!-- Projects Section -->
      <section id="projects" aria-labelledby="projects-title">
        <h2 id="projects-title">Project Documentation</h2>
        <div
          class="project-grid dynamic-projects"
          role="list"
          aria-label="Project list"
          lang="en"
        >
          <!-- Projects loaded dynamically from JSON -->
        </div>

        <!-- Project Preview Overlay Window -->
        <div class="project-preview" aria-label="Project preview overlay">
          <button class="exit-button" aria-label="Close preview">Exit</button>
          <div class="preview-content"><!-- Project preview content --></div>
        </div>
      </section>

      <!-- Contact / Social Links -->
      <section id="contact" aria-labelledby="contact-title">
        <h2 id="contact-title">Connect</h2>
        <div class="mac-window">
          <div class="window-title-bar" aria-level="3" role="heading">
            <div class="window-controls">
            </div>
            <div class="window-title">Social Links</div>
          </div>
          <div class="content social-links">
            <div class="social-grid" role="list" aria-label="Social media links">
              <!-- Social icons/links loaded dynamically from JSON -->
            </div>
          </div>
        </div>
      </section>

      <!-- Visitor Counter -->
      <div class="visitor-counter" aria-label="Site visitor counter">
        <div class="counter-display" role="status" aria-live="polite">
          <div class="counter-digit" aria-hidden="true">0</div>
          <div class="counter-digit" aria-hidden="true">0</div>
          <div class="counter-digit" aria-hidden="true">0</div>
          <div class="counter-digit" aria-hidden="true">0</div>
          <div class="counter-digit" aria-hidden="true">0</div>
          <div class="counter-digit" aria-hidden="true">0</div>
        </div>
        <img
          src="https://hits.seeyoufarm.com/api/count/incr/badge.svg?url=https%3A%2F%2Fpauljunsukhan.com&count_bg=%2379C83D&title_bg=%23555555&icon=&icon_color=%23E7E7E7&title=visits&edge_flat=false"
          alt="Real-time visitor count for Paul Han's portfolio"
          id="visitor-badge"
          style="position: absolute; width: 1px; height: 1px; overflow: hidden;"
          aria-hidden="true"
        >
      </div>
    </div><!-- /.content -->
  </main>

  <!-- Fullscreen Overlay (for modals) -->
  <div class="overlay" aria-hidden="true"></div>

  <!-- Scripts -->
  <script type="module" src="scripts/globals.js"></script>
  <script type="module" src="scripts/projects.js"></script>
  <script type="module" src="scripts/socials.js"></script>
  <script type="module" src="scripts/desktop.js"></script>

  <!-- JSON-LD Structured Data (Schema.org) -->
  <script type="application/ld+json">
    {
      "@context": "https://schema.org",
      "@type": "Person",
      "name": "Paul Junsuk Han",
      "url": "https://pauljunsukhan.com",
      "image": "https://pauljunsukhan.com/assets/site/headshot.png",
      "sameAs": [
        "https://github.com/pauljunsukhan",
        "https://linkedin.com/in/pauljunsukhan"
      ],
      "jobTitle": ["Software Engineer", "Hardware Engineer"],
      "description": "SWE, HWE, Designer, Writer, Neurotech, AI",
      "knowsAbout": [
        "Software Engineering",
        "Hardware Engineering",
        "Concurrency Programming",
        "Electrical Engineering",
        "Creative Problem Solving",
        "Rationalism",
        "Progress Studies",
        "Full Stack Development",
        "AI/Machine Learning",
        "Founder"
      ],
      "alumniOf": [
        {
          "@type": "CollegeOrUniversity",
          "name": "Yale University",
          "department": ["Computer Science", "Electrical Engineering"]
        }
      ],
      "hasCredential": [
        {
          "@type": "EducationalOccupationalCredential",
          "credentialCategory": "degree",
          "name": "Bachelor of Science in Computer Science"
        },
        {
          "@type": "EducationalOccupationalCredential",
          "credentialCategory": "degree",
          "name": "Bachelor of Science in Electrical Engineering"
        }
      ],
      "workLocation": {
        "@type": "Place",
        "address": {
          "@type": "PostalAddress",
          "addressLocality": "San Francisco",
          "addressRegion": "CA",
          "addressCountry": "US"
        }
      },
      "homeLocation": {
        "@type": "Place",
        "address": {
          "@type": "PostalAddress",
          "addressLocality": "San Francisco",
          "addressRegion": "CA",
          "addressCountry": "US"
        }
      },
      "workExample": [
        {
          "@type": "TechArticle",
          "name": "Neural Network Visualizer",
          "url": "https://pauljunsukhan.com/projects/neural-network/",
          "abstract": "Interactive visualization tool for neural network architectures using WebGL and React",
          "proficiencyLevel": "Advanced",
          "genre": "Software Engineering",
          "datePublished": "2024-01-02",
          "author": {
            "@type": "Person",
            "name": "Paul Junsuk Han"
          },
          "keywords": ["Neural Networks","WebGL","React","Visualization","Machine Learning"],
          "technicalLevel": "Advanced"
        }
      ]
    }
  </script>
  <script type="application/ld+json">
    {
      "@context": "https://schema.org",
      "@type": "WebSite",
      "name": "Paul Han Portfolio",
      "url": "https://pauljunsukhan.com",
      "description": "Portfolio of Paul Han - Software & Hardware Engineer",
      "potentialAction": {
        "@type": "SearchAction",
        "target": "https://pauljunsukhan.com/search?q={search_term_string}",
        "query-input": "required name=search_term_string"
      }
    }
  </script>
  <script type="application/ld+json">
    {
      "@context": "https://schema.org",
      "@type": "BreadcrumbList",
      "itemListElement": [
        {
          "@type": "ListItem",
          "position": 1,
          "name": "Home",
          "item": "https://pauljunsukhan.com"
        }
      ]
    }
  </script>

  <!-- External Library Example (if you use Marked.js for markdown) -->
  <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>

  <!-- Load Our Modular JS (global, socials, projects, etc.) -->
  <script type="module">
    import { updateVisitorCounter, initAutoLinkify } from './scripts/globals.js';
    import { generateSocialLinks } from './scripts/socials.js';
    import { loadProjects } from './scripts/projects.js';

    // Optionally load a Markdown loader here if needed
    // import { MarkdownLoader } from './scripts/markdown.js';

    document.addEventListener('DOMContentLoaded', async () => {
      console.log('Initializing homepage...');

      // 1) Initialize visitor counter
      updateVisitorCounter();

      // 2) Generate social links (reads from config/socials.json by default)
      await generateSocialLinks().catch(err => {
        console.error('Error generating social links:', err);
      });

      // 3) Load projects (reads from config/projects.json by default)
      await loadProjects().catch(err => {
        console.error('Error loading projects:', err);
      });

      // 4) Initialize auto-linkify after content is loaded
      initAutoLinkify();

      // 5) (Optional) If you want to load Markdown content for #notes-content
      /*
      const mdLoader = new MarkdownLoader();
      const markdownConfigs = [
        { path: './notes/about.md', targetId: 'notes-content' }
      ];
      await mdLoader.loadMultiple(markdownConfigs);
      */

      console.log('Homepage initialization complete.');
    });
  </script>
</body>
</html>

================
File: README.md
================
# Personal Portfolio Website

A modern, SEO-friendly portfolio website built with vanilla HTML, CSS, and JavaScript.

## Features

- Responsive design
- SEO optimized
- Fast loading with minimal JavaScript
- Support for images, text, code blocks, and video
- Lazy loading for images
- Smooth scrolling navigation

## Local Development

To run the website locally:

1. Clone this repository
2. Open the project directory
3. Start a local server:

```bash
# Using Python 3
python3 -m http.server 8000

# Or using Node.js
npx serve
```

4. Visit `http://localhost:8000` in your browser

## Deployment

To deploy to your VPS:

1. Ensure your VPS has a web server installed (nginx recommended)
2. Set up SSL using Let's Encrypt
3. Configure your domain to point to your VPS
4. Upload the files to your web server

### Basic nginx Configuration

```nginx
server {
    listen 80;
    server_name yourdomain.com www.yourdomain.com;
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl;
    server_name yourdomain.com www.yourdomain.com;

    ssl_certificate /etc/letsencrypt/live/yourdomain.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/yourdomain.com/privkey.pem;

    root /var/www/portfolio;
    index index.html;

    location / {
        try_files $uri $uri/ =404;
    }
}
```

## Customization

1. Modify `index.html` to add your content
2. Update styles in `styles/main.css`
3. Add custom JavaScript in `js/main.js`
4. Place your images and media in the `assets/` directory

## Performance Optimization

- Images should be optimized before uploading
- Use modern image formats (WebP) with fallbacks
- Minimize external dependencies
- Use lazy loading for images and videos

================
File: robots.txt
================
User-agent: *
Allow: /
Disallow: /config/
Disallow: /assets/private/

# Allow search engines to crawl JavaScript and CSS files
Allow: /*.js$
Allow: /*.css$

# Prevent crawling of search results, if any
Disallow: /*?*

# Sitemap location
Sitemap: https://pauljunsukhan.com/sitemap.xml

# Crawl-delay for all bots
Crawl-delay: 10

================
File: site.webmanifest
================
{
  "name": "Paul Han Portfolio",
  "short_name": "Paul Han",
  "icons": [
    {
      "src": "assets/site/favicon-16x16.png",
      "sizes": "16x16",
      "type": "image/png"
    },
    {
      "src": "assets/site/favicon-32x32.png",
      "sizes": "32x32",
      "type": "image/png"
    },
    {
      "src": "assets/site/apple-touch-icon.png",
      "sizes": "180x180",
      "type": "image/png"
    }
  ],
  "theme_color": "#f5e6d3",
  "background_color": "#f5e6d3",
  "display": "standalone"
}
